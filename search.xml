<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>量子 shor 算法的实现 | Python Quskit</title>
      <link href="/2021/09/13/programming/liang-zi-ji-suan/"/>
      <url>/2021/09/13/programming/liang-zi-ji-suan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>最近在学量子计算，大多教材的介绍路线是<strong>从线性代数到量子算法的实现</strong>。</p><p>正好上学期讨论班讲“公钥系统”时接触了量子 shor 算法，趁此机会以实现 shor 算法为目标开启这一领域的学习。</p><p>（<a href="#main">点这里</a>直接进入主题）</p><h2 id="量子力学"><a href="#量子力学" class="headerlink" title="量子力学"></a>量子力学</h2><p>网络上关于量子力学的科普介绍很多，但其中不乏曲解，断章取义和伪科普。所幸就有了“遇事不决，量子力学”的调侃。</p><p>不过，有一说一，虽然量子力学没有一些人说的那么传呼其神，但在现实生活中，量子的技术已经深入到我们生活的方方面面。</p><p>摘知乎上的一段话，原文链接：<a href="https://www.zhihu.com/question/51726529">量子力学真的已经很成功的应用在工程技术上面了吗？</a>。</p><p>量子力学已经出现100多年，早就不是最尖端的物理了。事实上，量子力学是现代物理学所有研究领域的基石，是基础中的基础。而且，量子力学也早就被广泛应用到了技术当中，在化学、电子、材料等学科的研究中也用得很多。其实我一直希望关于量子力学的科普能做得更好一些，让更多人真正了解量子力学，而不是仅仅停留在又死又活的猫上。甚至有朝一日，量子力学能进入高中的课本，在某种意义上成为常识。</p><h2 id="推荐资源"><a href="#推荐资源" class="headerlink" title="推荐资源"></a>推荐资源</h2><h3 id="书籍文献"><a href="#书籍文献" class="headerlink" title="书籍文献"></a>书籍文献</h3><ol><li>量子计算的圣经：<a href="https://cdn.jsdelivr.net/gh/RexWzh/FileBed@master/pdf/quantum/three/Quantum%20Computation%20and%20Quantum%20Information.pdf">Quantum Computation and Quantum Information</a><br>这本书比较厚，有700+页，更适合做参考书；国内有中译本（文件较大，后续补发）</li><li>从线性代数到物理实现： <a href="https://cdn.jsdelivr.net/gh/RexWzh/FileBed@master/pdf/quantum/Mikio%20Nakahara,%20Tetsuo%20Ohmi%20-%20Quantum%20Computing.%20From%20Linear%20Algebra%20to%20Physical%20Realizations-CRC%20Press%20(2008">Nakahara Quantum Computing. From Linear Algebra to Physical Realizations</a>.pdf)<br>这本书证明写比较细致，容易阅读，初学推荐。</li><li>科普读物：<a href="https://cdn.jsdelivr.net/gh/RexWzh/FileBed@master/pdf/books/上帝掷骰子吗：量子物理史话%20曹天元.pdf">《上帝掷骰子吗：量子物理史话》</a><br>国内写得非常好的一本科普读物，推荐阅读。</li></ol><h2 id="视频资源"><a href="#视频资源" class="headerlink" title="视频资源"></a>视频资源</h2><p>视频资源主要来自 B 站。</p><ol><li>快速入门：<a href="https://www.bilibili.com/video/BV1oq4y1j7iZ?spm_id_from=333.999.0.0">大一新生也能懂的量子计算</a><br>有几节课的细节跟不上，或许书本看完用来温习更好。</li><li>系列课程：<a href="https://www.bilibili.com/video/BV1oy4y1U7PN?spm_id_from=333.999.0.0">斯坦福+伯克利教授亲授！！！最好的量子系列课程之一</a><br>视频内容很长，一直拖着没看。。。导师推荐。</li><li>作者导读：<a href="https://www.bilibili.com/video/BV1L4411P7sX?spm_id_from=333.999.0.0">《上帝掷骰子吗：量子物理史话》</a><br>视频分很多小节介绍量子力学的概念，适合碎片时间阅读</li><li>量子Kitty：<a href="https://www.bilibili.com/video/BV1HM4y1L7Kb?spm_id_from=333.999.0.0">一起吐槽网上乱七八糟的量子计算误区</a><br>哈佛剑桥的up，科普比较准确专业，推荐～</li></ol><h2 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h2><h1 id="量子计算"><a href="#量子计算" class="headerlink" title="量子计算"></a><span id="main">量子计算</span></h1><p><a href="https://blog.csdn.net/sinat_41832255/article/details/89669650">计算机是如何运算的</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> quantum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 LaTeX 写博客的两种方法</title>
      <link href="/2021/08/31/blog/math-tex/"/>
      <url>/2021/08/31/blog/math-tex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>数学博客没有 LaTeX 可万万不行，经过一番探索，发现 Tex 写博客的两个实用工具： MathJax 以及 KaTex。</p><blockquote><p>参考链接<br>CSDN：<a href="https://blog.csdn.net/weixin_44191286/article/details/102702479">Hexo 博客中使用 Latex</a></p></blockquote><h1 id="使用-MathJax"><a href="#使用-MathJax" class="headerlink" title="使用 MathJax"></a>使用 MathJax</h1><p>Hexo 默认的渲染引擎是 marked，但 marked 不支持 mathjax，所以需要更换渲染引擎为 hexo-renderer-kramed，主要步骤如下：</p><h2 id="安装-Kramed"><a href="#安装-Kramed" class="headerlink" title="安装 Kramed"></a>安装 Kramed</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save # 卸载 marked</span><br><span class="line">npm install hexo-renderer-kramed --save # 安装 kramed</span><br></pre></td></tr></table></figure><h2 id="更改文件配置"><a href="#更改文件配置" class="headerlink" title="更改文件配置"></a>更改文件配置</h2><p>打开/node_modules/hexo-renderer-kramed/lib/renderer.js<br>将：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">    // Fit kramed&#x27;s rule: $$ + \1 + $$</span><br><span class="line">    return text.replace(/`\$(.*?)\$`/g, &#x27;$$$$$1$$$$&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>修改为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="停用-hexo-math-并安装-mathjax"><a href="#停用-hexo-math-并安装-mathjax" class="headerlink" title="停用 hexo-math 并安装 mathjax"></a>停用 hexo-math 并安装 mathjax</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save # 卸载 hexo-math</span><br><span class="line">npm install hexo-renderer-mathjax --save # 安装 mathjax</span><br></pre></td></tr></table></figure><h2 id="更新-Mathjax-配置文件"><a href="#更新-Mathjax-配置文件" class="headerlink" title="更新 Mathjax 配置文件"></a>更新 Mathjax 配置文件</h2><p>打开/node_modules/hexo-renderer-mathjax/mathjax.html<br>将最后一行的<code>&lt;script&gt;</code>改为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="gt-更改默认转义规则"><a href="#gt-更改默认转义规则" class="headerlink" title="&gt;更改默认转义规则"></a>&gt;更改默认转义规则</h2><p>因为 LaTeX 与 markdown 语法有语义冲突，所以 hexo 默认的转义规则会将一些字符进行转义，我们需要对默认的规则进行修改。打开 /node_modules\kramed\lib\rules\inline.js ，将 <code>escape</code> 和 <code>em</code> 参数更改如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><br><img src="https://i.loli.net/2021/08/26/DOEmKtyqwALj9vW.png" alt="picture"></p><blockquote><p>注：修改转义规则后，<code>*</code> 仍在 markdown 的转义规则中，使用 mathjax 时，代码的 <code>*</code> 需写成 <code>\*</code>。</p></blockquote><h2 id="开启-mathjax"><a href="#开启-mathjax" class="headerlink" title="开启 mathjax"></a>开启 mathjax</h2><p>打开主题的 _config.butterfly.yml ，检索 <code>MathJax</code>，将 <code>enable</code> 参数设置为 <code>true</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MathJax</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: false</span><br></pre></td></tr></table></figure></p><blockquote><p>注：需要公式渲染的文章，在头部添加一行 <code>mathjax: true</code>，启用公式渲染。Mathjax 语法类似 latex ，但也有许多 Tex 语法不支持，另一个选项是使用 <em>Katex</em> 渲染公式。</p></blockquote><h1 id="使用-KaTeX"><a href="#使用-KaTeX" class="headerlink" title="使用 KaTeX"></a>使用 KaTeX</h1><p>参考<a href="https://www.liaoxuefeng.com/article/1280024328011810">使用KaTeX渲染数学公式</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 编写 LaTeX 工具</title>
      <link href="/2021/08/31/programming/latex-tool/"/>
      <url>/2021/08/31/programming/latex-tool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>用 Python 写过不少工具，都杂乱地堆放着。刚好最近在写博客，趁这个机会把一些 LaTeX 工具整理上来，其他工具等用到了再更新。<br><img src="https://i.loli.net/2021/08/31/AxwHlCD5yQsrdWv.png" width=50% height=50% /></p><h1 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h1><h2 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h2><h3 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h3><a href="/2021/07/19/blog/markdown-yu-fa/" title="Markdown">Markdown</a> 和 LaTeX 语法类似，所以相关工具在这里一块介绍。<!-- 部分 Tex 代码可以借助 MathJax 导入 Markdown 中，最近在了解 KaTeX，或许更适合博客的 Tex 写作？ --><h3 id="函数代码"><a href="#函数代码" class="headerlink" title="函数代码"></a>函数代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_to_MDTable</span>(<span class="params">content, title=<span class="literal">None</span>,copy=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将列表转化为 Markdown 格式&#x27;&#x27;&#x27;</span></span><br><span class="line">    align = <span class="string">&quot;|&quot;</span>.join([<span class="string">&quot;:-:&quot;</span>]*<span class="built_in">len</span>(content[<span class="number">0</span>])) <span class="comment"># markdown 表格第二行格式</span></span><br><span class="line">    content = [<span class="string">&quot;|&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line) <span class="keyword">for</span> line <span class="keyword">in</span> content] <span class="comment"># 列表元素转字符串，行内用 | 分割</span></span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 标题未定义，则提取列表第一行作为标题</span></span><br><span class="line">        title = content[<span class="number">0</span>]</span><br><span class="line">        content = content[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        title = <span class="string">&quot;|&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> title)</span><br><span class="line">    txt = <span class="string">&quot;\n&quot;</span>.join([title,align,*content]) <span class="comment"># 导出文本，用 \n 分隔行</span></span><br><span class="line">    <span class="keyword">if</span> copy: pyperclip.copy(txt)</span><br><span class="line">    <span class="keyword">return</span> txt</span><br></pre></td></tr></table></figure><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ol><li>默认以 <code>content</code> 首行作为标题，当 <code>title</code> 指定时，以 <code>title</code> 作为标题。</li><li>参数 <code>copy</code> 设置是否复制到剪贴板，默认为“是”，该选项需要 Python 库 <code>pyperclip</code>，可以用 <code>pip install pyperclip</code> 安装。</li></ol><p>示例，下边方法等价<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### 指定 title ###</span><br><span class="line">content = [[1,2,3],[2,3,4]]</span><br><span class="line">title = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">list_to_MDTable(content,title=title)</span><br><span class="line"></span><br><span class="line">### 不指定 title ###</span><br><span class="line">content = [[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[1,2,3],[2,3,4]]</span><br><span class="line">list_to_MDTable(content)</span><br></pre></td></tr></table></figure></p><p>Markdown 效果如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table></div><h2 id="LaTeX-列表"><a href="#LaTeX-列表" class="headerlink" title="LaTeX 列表"></a>LaTeX 列表</h2><p>katex</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】多设备管理博客</title>
      <link href="/2021/08/29/blog/hexo-05-multidevice/"/>
      <url>/2021/08/29/blog/hexo-05-multidevice/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>平时主要在笔记本上写博客，但有时笔记本没带回宿舍，这时就要用宿舍电脑来更新博客了。我们知道， Git + Github 可以实现多平台管理编程项目，而博客的处理方法完全类似。</p><blockquote><p><strong>参考链接</strong><br>CSDN：<a href="https://blog.csdn.net/nineya_com/article/details/103535192">hexo 多终端同步和管理</a>。</p></blockquote><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>原理：把<strong>博客源码</strong>提交到 GitHub 存储库，使用 git 进行不同终端的本地库同步。<br>有两种不同的方法：</p><ul><li>创建仓库：需要在 GitHub 上创建一个用于存储源码的库，建议最好选择 <code>private</code> 不要公开，除非你博客的所有内容打算完全公开。</li><li>创建分支：不新建仓库，将源码放在博客界面所在的仓库的另一个分支中。</li></ul><blockquote><p>注：第二种方法把博客源码和部署代码放在同一个仓库，虽然方便链管理，但缺陷很多：比如 Github pages 只能使用公开仓库，这意味着源码也将公开；如果博客上设置加密功能，源码公开后加密毫无意义。所以教程只介绍第一种方法。</p></blockquote><h1 id="过程步骤"><a href="#过程步骤" class="headerlink" title="过程步骤"></a>过程步骤</h1><h2 id="新建私人仓库"><a href="#新建私人仓库" class="headerlink" title="新建私人仓库"></a>新建私人仓库</h2><p>在 GitHub 上创建私人仓库，用于存储源码，注意不要添加 Markdown 文件。</p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>打开博客目录，目录下有一个 <code>.gitignore</code> 文件，没有就自己创建一个，该文件用于<strong>忽略指定的文件不进行同步</strong>，默认的配置内容如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><br>忽略内容说明：</p><ul><li><code>public/</code> 存放用于部署的网站文件，每次输入 <code>hexo g</code> 就能生成</li><li><code>node_modules/</code> 存放博客插件，文件较大， <code>npm</code> 安装的插件一般在这里</li></ul><h2 id="仓库及链接"><a href="#仓库及链接" class="headerlink" title="仓库及链接"></a>仓库及链接</h2><ol><li><p>新建本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入博客主目录</span><br><span class="line">git init # 初始化仓库</span><br><span class="line">git add . # 添加所有文件</span><br><span class="line">git commit -m &quot;initialize&quot; # 提交修改</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>.gitignore</code> 确保了冗余文件被 git 自动忽略。</p></blockquote></li><li><p>连接远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 初始化本地仓库</span><br><span class="line">git remote add origin &lt;git 源码仓库地址&gt; # 连接远端</span><br><span class="line">git remote -v # 查看连接</span><br><span class="line">git push -u origin master # 提交修改</span><br></pre></td></tr></table></figure><blockquote><p>注：相关 Git 语法参考 <a href="/2021/08/25/programming/git/" title="git 常用操作和命令">git 常用操作和命令</a></p></blockquote></li></ol><h2 id="新设备同步方法"><a href="#新设备同步方法" class="headerlink" title="新设备同步方法"></a>新设备同步方法</h2><ol><li>在新设备上安装 git、nodejs 和 hexo</li><li>新建博客目录，输入 <code>hexo init</code> 初始化</li><li><code>git clone &lt;git 源码仓库地址&gt;</code> 克隆上一步的仓库</li><li>将克隆下来的文件合并到博客目录</li></ol><p>到这里新设备就同步好了，但由于 <code>node_modules/</code> 目录被 <code>.gitignore</code> 忽略，还注意下边问题。</p><h1 id="关于-gitignore-的问题"><a href="#关于-gitignore-的问题" class="headerlink" title="关于 gitignore 的问题"></a>关于 gitignore 的问题</h1><h2 id="主题安装方式"><a href="#主题安装方式" class="headerlink" title="主题安装方式"></a>主题安装方式</h2><p>hexo 5.0.0 版本开始，支持两种方法安装主题，例如：</p><ul><li><code>npm i hexo-theme-butterfly # 使用 npm</code></li><li><code>git clone &lt;主题 git 仓库 &gt; themes/&lt;主题名&gt;</code></li></ul><p>前者的主题安装目录为 <code>node_modules/</code> ，不方便被 git 记录。所以如果多设备同步博客，主题安装要用后一种方法。</p><blockquote><p>注：由于 git 不允许嵌套仓库， 用 <code>git clone</code> 下载主题后要将仓库内的 <code>.git</code> 文件删除。</p></blockquote><h2 id="插件安装问题"><a href="#插件安装问题" class="headerlink" title="插件安装问题"></a>插件安装问题</h2><p> <code>npm</code> 安装的插件在 <code>node_modules/</code> 目录下，新设备中需要重新安装。</p><p>解决方法：</p><ol><li>进入博客目录，输入 <code>code hexo-package.sh</code> 新建 bash 文件</li><li>写入新安装的插件信息</li><li>在新设备中输入 <code>bash hexo-package.sh</code> 安装相应插件</li></ol><p>例如，目前我的 <code>hexo-package.sh</code> 内容为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">### 使用 bash hexo-package-sh 运行本文件，快速下载插件</span><br><span class="line"></span><br><span class="line">### 以下插件只在主题刚开始使用时用到</span><br><span class="line"># npm install hexo-renderer-pug hexo-renderer-stylus # butterfly 渲染工具</span><br><span class="line"># cnpm install --save hexo-deployer-git # Git 部署工具</span><br><span class="line"></span><br><span class="line">### 音乐，密码，搜索功能</span><br><span class="line">npm install aplayer # 音乐功能</span><br><span class="line">npm install --save hexo-tag-aplayer # 音乐功能</span><br><span class="line">npm install --save hexo-blog-encrypt # 文章加密</span><br><span class="line">npm install hexo-generator-search --save # 搜索功能</span><br></pre></td></tr></table></figure></p><blockquote><p>注：每次安装新插件时，也在 <code>hexo-package.sh</code> 中写入相应插件信息。</p></blockquote><h2 id="插件修改问题"><a href="#插件修改问题" class="headerlink" title="插件修改问题"></a>插件修改问题</h2><p>大多数插件安装后不需要修改，用上一步的方法就够了。但一些插件，比如 <code>hexo-render-kramed</code> 安装后，还要修改其中的文件 <code>renderer.js</code>。由于该文件不被 git 记录，新设备不会同步修改内容。</p><p>解决方法：用 <code>-f</code> 参数，让 <code>git add</code> 添加被 <code>.gitignore</code> 忽略的文件，例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add node_modules/hexo-render-kramed/ -f</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 修改默认终端（Win）</title>
      <link href="/2021/08/28/vscode-terminal/"/>
      <url>/2021/08/28/vscode-terminal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><blockquote><p><strong>参考链接</strong><br>知乎：<a href="https://zhuanlan.zhihu.com/p/365625019">修改 vscode 默认终端为 git bash</a><br>博客园：<a href="https://www.cnblogs.com/deng-jie/p/12719739.html">Vscode 将终端改为 Git bash</a></p></blockquote><p>Windows 环境下使用 Visual Studio Code ，其控制台终端默认是 cmd 或 PowerShell。但是对于习惯使用 Linux 操作命令的同学来说，可能不太喜欢用这种终端操作，而且诸如 <code>hexo s</code> 之类部署博客的命令都不能用 cmd 和 PowerShell 执行。下面我们把 Vscode 的终端改为 bash ，本文是使用的安装 Git 时自带的 bash.exe。</p><h1 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h1><p>网上找了不少教程，方法大多不管用，应该是新版本 Vscode 不支持原来的设置方法，本篇主要参考<a href="https://www.cnblogs.com/deng-jie/p/12719739.html">知乎</a>的评论区。 </p><h2 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h2><p>如下图：点击设置 -&gt; 搜索 <code>shell: windows</code> -&gt; 点击设置 <code>settings.json</code><br><img src="https://i.loli.net/2021/08/28/mrENk4ApLZlvQh2.png" alt="tupian"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>如下图，将旧代码注释，并粘贴下边代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;terminal.integrated.profiles.windows&quot;: &#123;</span><br><span class="line">&quot;Command Prompt&quot;: &#123;</span><br><span class="line">&quot;path&quot;: &quot;D:\\install\\Git\\bin\\bash.exe&quot;,</span><br><span class="line">&quot;icon&quot;: &quot;terminal-cmd&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;Command Prompt&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://i.loli.net/2021/08/28/4ZnhbcTQi8KXPt3.png" alt="20210828173647"></p><blockquote><p>注：其中 <code>path</code> 的参数为 Git 安装目录下 bash 文件的位置，注意不是 git-bash 的位置。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用操作和命令</title>
      <link href="/2021/08/25/programming/git/"/>
      <url>/2021/08/25/programming/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>Git 是目前世界上最先进的分布式版本控制系统，可以用于敏捷高效地处理任何或小或大的项目。<br>个人而言，主要用 Git + Github 实现这些功能：</p><ul><li>备份，同步本地项目</li><li>多设备管理项目</li><li>文件历史版本（改错的后悔药）</li><li>克隆 Github 项目到本地</li><li>部署博客网站</li></ul><p>本篇主要目的是记录 Git 中经常用的操作和命令，方便查阅，至于 Git 的安装方法和工作原理网上有大把教程，就没必要说了。</p><blockquote><p>推荐网站：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖学锋的 Git 教程</a>，最开始学习 Git 就在这个网站。</p></blockquote><hr><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="git-config-设置邮箱"><a href="#git-config-设置邮箱" class="headerlink" title="git config 设置邮箱"></a>git config 设置邮箱</h2><p>用 <code>git commit</code> 提交修改时，需要“自报家门”，也就是提交人的姓名和邮箱。命令如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 设置用户名和邮箱</span><br><span class="line">git config --global user.name &quot;Your Name&quot; </span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"></span><br><span class="line"># 查看用户名和邮箱</span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br><span class="line"></span><br><span class="line"># 取消用户名和邮箱</span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure></p><blockquote><p>注： <code>--global</code> 参数全局设置用户名和邮箱；在 git 仓库中，如果不加 <code>--global</code> ，则给仓库单独设置了用户名和邮箱。</p></blockquote><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init # 新建仓库</span><br><span class="line">git add &lt;文件名/文件夹&gt; # 添加文件/文件夹</span><br><span class="line">git add . # 添加当前目录下的所有文件</span><br><span class="line">git commit -m &quot;&lt;注释&gt;&quot; # 提交修改，*注释*为对提交内容的解释，不能为空</span><br><span class="line">git status # 查看当前工作区变化</span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><blockquote><p>参考链接<br>CSDN：<a href="https://blog.csdn.net/lk142500/article/details/82869018">Git 中使用 .gitignore</a><br>CSDN：<a href="https://blog.csdn.net/toopoo/article/details/88660806">.gitignore 失效解决方法</a></p></blockquote><p>git 仓库中，<code>.gitignore</code> 指定的文件和文件夹会被 <code>git add</code> 自动忽略，但 <code>-f</code> 参数可以让 <code>git add</code> 添加被忽略的文件。<br>使用说明：</p><ul><li><code>&lt;file/folder&gt;</code> 忽略所有目录下的该文件或文件夹</li><li><code>./&lt;file/folder&gt;</code> 忽略当前目录下的该文件名或文件夹</li><li><code>! &lt;file/folder</code> <code>!</code> 代表取消忽略</li></ul><blockquote><p>注：如果文件夹被 <code>.gitignore</code> 忽略，用 <code>git add &lt;path&gt; -f</code> 强制添加后，只有添加时刻的文件被 git 记录，之后文件夹内的其他文件变化都不会被记录。</p></blockquote><hr><h1 id="历史版本-后悔药"><a href="#历史版本-后悔药" class="headerlink" title="历史版本-后悔药"></a>历史版本-后悔药</h1><p>git 是文件版本控制器，在 debug 等方面能发挥出色作用。</p><h2 id="git-log-版本历史"><a href="#git-log-版本历史" class="headerlink" title="git log 版本历史"></a>git log 版本历史</h2><p>用 <code>git log --pretty=oneline</code> 查看提交历史，参数 <code>--pretty=oneline</code> 表示只显示单行信息，输出如下<br>   <img src="https://i.loli.net/2021/08/28/PXyqL8StG7QfW6A.png" width="70%" height="70%" /></p><p>git 许多操作需要指定版本，两种常用方式分别是 <code>commit-id</code> 和 <code>HEAD</code>。<code>commit-id</code> 就是图中的橙色字体，一串哈希值，指定某个版本，只需输入 <code>commit-id</code> 的前几位数字（至少4位），并确保不出现歧义。<code>HEAD</code> 用法如下：</p><ul><li><code>HEAD</code> 表示当前最新版本</li><li><code>HEAD^</code> 表示前一版本，多个 <code>^</code> 代表前几个</li><li><code>HEAD~n</code> 表示前 n 个版本，n 取 0 代表最新版本。</li></ul><h2 id="git-diff-查看区别"><a href="#git-diff-查看区别" class="headerlink" title="git diff 查看区别"></a>git diff 查看区别</h2><blockquote><p><strong>参考链接</strong><br>简书：<a href="https://www.jianshu.com/p/f33efd96ed75">Git diff 比较两个版本文件之间的差异</a><br>博客园：<a href="https://www.cnblogs.com/qianxinxu/p/7159739.html">git 还原文件到之前版本</a></p></blockquote><p>某个文件修改后出 bug，我们需要将文件和以前版本对比，找出问题，这时可以用 <code>git diff</code> 来完成。语法如下，方括号 [] 内的参数可选，默认查看整个工作区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 工作区和最新版本库的差异</span><br><span class="line">git diff [&lt;文件&gt;] </span><br><span class="line"></span><br><span class="line"># 查看工作区与指定版本的区别。</span><br><span class="line">git diff &lt;commit-id&gt; [&lt;文件&gt;]</span><br><span class="line"></span><br><span class="line"># 查看两个版本的区别</span><br><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt; [&lt;文件&gt;]</span><br><span class="line"></span><br><span class="line"># --stat 参数查看简略区别</span><br><span class="line">git diff &lt;commit-id1&gt; &lt;commit-id2&gt; --stat [&lt;文件&gt;]</span><br></pre></td></tr></table></figure><p>图片示例<br><img src="https://i.loli.net/2021/08/28/1pjTXdgWY4mcKJL.png" width="70%" height="70%" /></p><h2 id="git-checkout-回退文件"><a href="#git-checkout-回退文件" class="headerlink" title="git checkout 回退文件"></a>git checkout 回退文件</h2><p>文件不小心改错，要回退到改错前的版本，可使用 <code>checkout</code> 命令，语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;commit-id&gt; &lt;filename&gt; # 将文件回退到 commit-id 的版本</span><br><span class="line">git checkout &lt;filename&gt; # 将文件回退到 HEAD 版本</span><br><span class="line">git checkout . # 将工作区回退到 HEAD 版本</span><br></pre></td></tr></table></figure><blockquote><p>注： <code>git checkout</code> 同时回退工作区和暂存区的文件，因而不需要再用 <code>git add</code>。</p></blockquote><!-- ## 调试工作区当 bug 比较隐秘时，我们可能要对整个工作区调试，这时可以新建 debug 分支，在新分支上放手修改。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;保存进度&quot; # 保存进度</span><br><span class="line">git branch debug # 新建 debug 分支</span><br><span class="line">git checkout debug # 切换到 debug 分支</span><br><span class="line"># 进行调试修改，改错大不了把 debug 分支干掉重来。</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"># 工作区，暂存区和版本库</span><br><span class="line">初学 Git 必须掌握三个概念： `工作区`，`缓存区` 和 `版本库`，原理不多解释，下边是常用操作。</span><br><span class="line"></span><br><span class="line">## git resotre</span><br></pre></td></tr></table></figure><p>git restore —staged &lt;文件&gt; # 暂存区文件回退 HEAD 状态<br>git restore &lt;文件&gt; # 工作区文件回退为 HEAD 状态<br>git checkout &lt;文件&gt; # 与上一命令等同<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## git rm 命令</span><br><span class="line">  </span><br></pre></td></tr></table></figure><br>git rm —cached <file> -rf # 删除/清空暂存区<br>git rm <file> -rf # 删除/清空暂存区和工作区<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## git reset版本回退</span><br><span class="line"> `git reset` 回退版本，即改变 HEAD 指向的位置。有三个可选参数 `soft`, `hard` 和 `mixed`，不同参数对工作区和暂存区有不同影响，默认参数为 `mixed`，参考[这里](https://www.cnblogs.com/yueguanguanyun/p/13569746.html)。</span><br><span class="line"></span><br><span class="line">三者区别如下:</span><br><span class="line">   1. git reset --soft</span><br><span class="line">   保留 **工作区和暂存区** 的内容，简单来说就是你的代码还在只是变成了未提交状态或未添加状态</span><br><span class="line">   &lt;img src=&quot;https://i.loli.net/2021/08/29/m8Xvh2usypwUKSc.png&quot; width=70% height=70% /&gt;</span><br><span class="line"></span><br><span class="line">   2. git reset --hard</span><br><span class="line">   回退 **工作区和暂存区** 到指定的 commit 版本</span><br><span class="line">   &lt;img src=&quot;https://i.loli.net/2021/08/29/2OPRQFyN6YEHxbC.png&quot; width=70% height=70% /&gt;</span><br><span class="line"></span><br><span class="line">   3. git reset --mixed</span><br><span class="line">   保留 **工作区** 的内容，回退 **暂存区** 到指定的 commit 版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># git 分支</span><br><span class="line">分支是 git 最重要的功能之一，主要用在团队项目。而一些个人使用场景中，Git 分支也能发挥很大作用。</span><br><span class="line"></span><br><span class="line">## 基本操作</span><br></pre></td></tr></table></figure><br>git branch # 查看分支<br>git branch -v # 查看分支和相应 commit 简略信息<br>git branch -r # 查看远程版本库分支列表<br>git branch -a # 查看所有分支列表，包括本地和远程<br>git branch &lt;分支名&gt; # 新建分支<br>git branch -m &lt;分支&gt; &lt;新分支名&gt; # 修改分支名<br>git checkout &lt;分支名&gt; # 切换到分支<br>git checkout -b &lt;分支名&gt; # 切换到分支，不存在时创建分支<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 常用命令的分支操作</span><br></pre></td></tr></table></figure><br>git clone -b <dev> <github 地址> # 克隆远程仓库的指定分支 dev<br>git push origin master:<dev> # 推送到指定分支 dev<br>git push origin <dev> # 默认推送到与当前分支同名的云端分支<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 删除分支</span><br><span class="line">参考博客园： [Git删除分支/恢复分支](https://www.cnblogs.com/utank/p/7880441.html)</span><br><span class="line"></span><br><span class="line">1. 如果需要删除的分支不是当前正在打开的分支，使用 `branch -d` 直接删除</span><br></pre></td></tr></table></figure><br>   git branch -d <branch_name><br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 删除一个正打开，或未合并的分支，需使用 -D 选项</span><br></pre></td></tr></table></figure><br>   git branch -D <branch_name><br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 恢复被删除的分支</span><br><span class="line">Git 会自行负责分支的管理，所以当我们删除一个分支时，Git 只是删除了指向相关提交的指针，但该提交对象依然会留在版本库中。因此，如果我们知道删除分支时的散列值，就可以将某个删除的分支恢复过来。在已知提交的散列值的情况下恢复某个分支：</span><br></pre></td></tr></table></figure><br>   git branch <branch_name> <hash_val><br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">如果我们不知道想要恢复的分支的散列值，可以用 `git reflog` 命令将它找出来。例如：</span><br><span class="line"></span><br><span class="line">1. 删除分支</span><br><span class="line">   ![pic](https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20210909222629.png)</span><br><span class="line">2. 输入 `git branch next HEAD@&#123;1&#125;` 恢复分支。</span><br><span class="line">   ！[pic](https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20210909223044.png)</span><br><span class="line"></span><br><span class="line">&gt; 注：`git reflog` 命令显示整个本地仓储的 commit，包括所有 branch 的 commit ，甚至包括已经撤销的 commit。只要 HEAD 发生了变化， 就会在 reflog 里面看得到。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Github 与 Git</span><br><span class="line"></span><br><span class="line">## 关于 github</span><br><span class="line">GitHub 是~~世界上最大的同性交友网站~~基于 Git 的一个代码托管网站。开发者可以将代码在 GitHub 上开源，可以浏览其它项目的代码，`fork` 到自己名下做修改，`clone` 回本地（没有访问权限的 private repo 除外）使用，也可以发起 `pull request` 向上游提交自己的修改。</span><br><span class="line"></span><br><span class="line">&gt; 注：基于 Git 的代码托管网站还有很多，比如 `Gitlab`， `Gitee（码云）` 等等，但相比之下，Github 有更多的生态基础。引用 [Coding](https://blog.coding.net/blog/why-coding-does-not-equals-github) 的一段精炼介绍：**Github 发明了碉堡了的两个功能：`Fork` 和 `Pull Request`。这两个功能创造了整个 Github 生态系统，使得“基因”得以繁衍和进化，充满了生命力。基因通过 `Fork` 被复制，而 `Pull Request` 使得基因得以进化。好的基因会被大量的 `Fork`，从而实现了优胜劣汰。这一整套体系才是精华所在，说 Github 是代码仓库显然太肤浅了。**</span><br><span class="line"></span><br><span class="line">## git 命令</span><br><span class="line">本节整理 Github 中常见场景的 Git 使用方法，初次使用 Github 还要进行设置：&#123;% post_link programming/Github多账户设置 %&#125;。</span><br><span class="line"></span><br><span class="line">### 本地仓库推送到云端</span><br><span class="line">1. 在远端新建仓库</span><br><span class="line">2. `git remote` 连接远端仓库</span><br></pre></td></tr></table></figure><br>   git remote add origin <git 仓库地址> # 添加远端仓库为分支 origin<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 将本地仓库推送到远端</span><br></pre></td></tr></table></figure><br>   git push -u origin master<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注： `-u` 参数设置默认推送的分支，后续推送本地修改只需要 `git push` 。</span><br><span class="line"></span><br><span class="line">### 远端仓库克隆到本地</span><br><span class="line">1. 复制远端仓库地址</span><br><span class="line">2. `git clone` 到本地，此时目录下多了相应 git 仓库</span><br></pre></td></tr></table></figure><br>   git clone <git 仓库地址><br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3. 如果对克隆的仓库有修改权限，后续可用 `git push` 推送本地修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 修改连接的仓库</span><br><span class="line">使用场景：</span><br><span class="line">   - git 连接的远端仓库改名了</span><br><span class="line">   - `git push` 要推送到另一个 github 仓库，或另一个平台的仓库</span><br><span class="line">   - &#123;% post_link programming/Github多账户设置 &quot;用 Gitee 给 git clone 加速&quot; %&#125;</span><br><span class="line"></span><br><span class="line">1. 查看并取消当前仓库的链接</span><br></pre></td></tr></table></figure><br>   git remote # 查看远端仓库的分支名<br>   git remote -v # 查看远端仓库链接<br>   git remote remove origin # 删除远端分支<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 连接新仓库，并推送本地内容</span><br></pre></td></tr></table></figure><br>   git remote add origin <git 仓库地址><br>   git push -u origin master<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 更新和修改</span><br><span class="line">借助 Github 可在多个设备上同步管理一个项目。假设设备 A 提交了修改，此时远端仓库比设备 B 领先了一个提交。若设备 B 也做了一些修改，直接提交会导致矛盾，需进行下边步骤再提交。</span><br><span class="line"></span><br><span class="line">1. `git commit -m &quot;...&quot;` 保存本地修改</span><br><span class="line">2. `git pull origin master` 将远端的修改拉到本地，提示两仓库的差别，在修改合并后提交到本地修改</span><br><span class="line">3. 如果遇到文件冲突，修改后用 `git commit` 提交， `git push` 就能继续使用了</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分支实战</span><br><span class="line"></span><br><span class="line">## 文件外链</span><br><span class="line">### 关于外链</span><br><span class="line">文件外链，就是制作一个链接，使文件可以通过访问该链接下载。在需要分享文件的场景，用外链可以将下载速度从几十 kb/s 提升到几 m/s。图片外链又称为图床，网站图片使用外链可以极大提高加载速度。图床的制作方法很多，参看这篇介绍：&#123;% post_link blog/图床 %&#125;。</span><br><span class="line"></span><br><span class="line">### jsdelivr</span><br><span class="line">[jsdelivr](https://www.jsdelivr.com/)是一个免费的 CDN 加速网站，按下边格式可以将 Github 仓库的文件制作成外链</span><br></pre></td></tr></table></figure><br><a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;用户名&gt;/&lt;仓库名&gt;@&lt;分支名&gt;/&lt;文件路径&gt;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 使用分支</span><br><span class="line">场景一：有多个设备，在新设备上给仓库上传文件时，需先下载仓库，再上传文件。但下载要占用本地空间，而且如果仓库文件很多，下载还要花不少时间。</span><br><span class="line"></span><br><span class="line">场景二：用 picgo 将 Github 仓库设置为默认图床，如果本地要推送文件，得先把 picgo 上传的都下载下来，很没必要。</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">   1. 新建 Github 仓库和本地仓库</span><br><span class="line">   2. 进入本地仓库，输入下边命令</span><br></pre></td></tr></table></figure><br>   git branch picgo # 新建分支 picgo<br>   git checkout picgo # 切换分支<br>   git rm ./* -rf # 清理文件<br>   git push -u origin picgo # 分支推给远端<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这样 `picgo` 上传的文件就在 `picgo` 分支和本地的 `master` 分支不相干扰，场景一的处理方法类似。</span><br><span class="line"></span><br><span class="line">## 博客文件</span><br><span class="line">搭建了几个博客网站，为方便多设备管理，我把博客源文件同步到 Github 仓库中。但每个网站开一个仓库有些冗余，且仓库管理也不方便，这时可以利用分支功能。方法如下：</span><br><span class="line">1. 新建 Github 仓库用于存放博客文件</span><br><span class="line">2. 在本地仓库中，输入下边命令</span><br></pre></td></tr></table></figure><br>   git remote add origin <Github 仓库> # 连接仓库<br>   git branch -m master <dev> # 修改本地主分支名<br>   git push -u origin <dev> # 提交到 github 的 dev 分支（自动创建）<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 注意事项</span><br><span class="line">汇总 Git 使用过程中遇到的问题。</span><br><span class="line"></span><br><span class="line">## git 未跟踪文件</span><br><span class="line">没有被 git 跟踪的文件，不受 git 命令影响。</span><br><span class="line"></span><br><span class="line">例如被 .gitignore 忽略的文件，或者尚未被 `git add` 的文件。</span><br><span class="line"></span><br><span class="line">无论用 `git reset` 重置工作区，`git checkout` 切换分支，还是 `git rm * -rf` 清空文件，都不影响。</span><br><span class="line"></span><br><span class="line">## win 换行符</span><br><span class="line">&gt; 参考 [CSDN](https://blog.csdn.net/Viogs/article/details/83745443)</span><br><span class="line"></span><br><span class="line">在 windows 平台下 git add 的时候经常会出现如下错误</span><br><span class="line">   ![20210831231958](https://i.loli.net/2021/08/31/ELrul3pQ6y7HeJD.png)</span><br><span class="line"></span><br><span class="line">问题原因：</span><br><span class="line">   git 在 windows 下，默认是 CRLF 作为换行符，`git add` 提交时，检查文本中有 LF 换行符（ linux 系统里面的），则会警告。所以问题的解决很简单，让 git 忽略该检查即可。</span><br><span class="line">解决方法：执行下边命令</span><br></pre></td></tr></table></figure><br>   git config —global core.autocrlf false<br>   ```</p><!-- https://blog.csdn.net/weixin_39746652/article/details/112359394 -->]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】常见命令整理</title>
      <link href="/2021/08/21/server/03-ubuntu-usage/"/>
      <url>/2021/08/21/server/03-ubuntu-usage/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>记录刚接触 Linux 系统时，学到的实用有意思的命令。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name &lt;文件/文件夹名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注：名称支持正则表达式，最常见的比如加 * 号。</p></blockquote><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>将 <code>path</code> 中的文件移动到 <code>newpath</code> 中，有下边几种方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv path/* newpath </span><br><span class="line">mv path/* newpath/</span><br><span class="line">mv path/* newpath/ -i</span><br><span class="line">mv path/* path/.[^.]* newpath/</span><br><span class="line">cp path/* newpath/ -rf &amp;&amp; rm path/* -rf</span><br></pre></td></tr></table></figure><br>区别：</p><ul><li>第一行当文件夹 <code>newpath</code> 不存在，且 <code>path</code> 下只有一个文件时，执行的是重命名操作，不建议使用。</li><li>默认覆盖同名文件，第三行 <code>-i</code> 设置覆盖前提醒</li><li>第四行 <code>path/*</code> 匹配所有非隐藏文件，<code>path/.[^.]*</code> 匹配隐藏文件</li><li><code>mv</code> 命令不能覆盖同名目录，第五行用 <code>cp</code> 和 <code>rm</code> 组合来实现目录覆盖</li></ul><p><code>mv</code> 常用于文件或文件夹的重命名，但后者注意， <code>mv path1/folder1 path2/folder2</code> 效果如下</p><pre><code>  - 如果文件夹 `folder2` 不存在，则将 `path1/folder1` 移动为 `path2/folder2`  - 如果文件夹 `folder2` 已存在，则将 `path1/folder1` 移动为 `path2/folder2/folder1`</code></pre><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><h3 id="默认方式：键盘按键"><a href="#默认方式：键盘按键" class="headerlink" title="默认方式：键盘按键"></a>默认方式：键盘按键</h3><ol><li><code>Ctrl + PrtSc</code> 截全屏</li><li><code>Ctrl + shift + PrtSc</code> 选择截屏区域</li></ol><p>说明：</p><ul><li>按键 <code>PrtSc</code> 一般在键盘右上角的位置；</li><li>默认截屏方式，图片保存在 <code>~/picture</code> 目录下；</li><li>截屏后，文件不会保存到剪贴板</li></ul><h3 id="高级方法：脚本-快捷键"><a href="#高级方法：脚本-快捷键" class="headerlink" title="高级方法：脚本+快捷键"></a>高级方法：脚本+快捷键</h3><p>参考 CSDN：<a href="https://blog.csdn.net/tcliuwenwen/article/details/103752604">Ubuntu 快捷键自定义截图</a></p><p>方法：编写脚本 <code>screenshot.sh</code>，再设置快捷键执行这一脚本。</p><ol><li>新建目录用于存放脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/Scripts</span><br></pre></td></tr></table></figure></li><li>新建脚本文件，并进行编辑（vscode）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Scripts</span><br><span class="line">code screenshot.sh</span><br></pre></td></tr></table></figure></li><li><p>脚本内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">gnome-screenshot -ac</span><br><span class="line">xclip -selection clipboard -t image/png -o &gt; ~/PicPath/screenshot_`date +%Y%m%d%H%M%S`.png</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>gnome-screenshot 截图工具，-a 参数设置自选截取区域，-c 参数设置截图保存到剪切板</li><li>xclip 将剪切板保存为文件</li></ul></li><li><p>点击设置 -&gt; 键盘快捷键 -&gt; 点击底部加号，给脚本设置快捷键<br><img src="https://i.loli.net/2021/08/23/BgTjP6hJwLvbGX5.png" alt="20210823221559"></p></li></ol><h3 id="安装软件：deepin-screenshot"><a href="#安装软件：deepin-screenshot" class="headerlink" title="安装软件：deepin-screenshot"></a>安装软件：deepin-screenshot</h3><p>参考简书：<a href="https://www.jianshu.com/p/6f71154f3dfb">Ubuntu 下类似 QQ 截图的软件</a></p><ol><li>安装软件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install deepin-screenshot -y</span><br></pre></td></tr></table></figure></li><li>命令行测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deepin-screenshot</span><br></pre></td></tr></table></figure></li><li>设置快捷键<br><img src="https://i.loli.net/2021/08/24/ZwMq1K7fvESsRAT.png" alt="20210824001847"></li></ol><h2 id="修改侧边栏"><a href="#修改侧边栏" class="headerlink" title="修改侧边栏"></a>修改侧边栏</h2><p>打开文件管理器，如下图，左侧为快捷路径。<br><img src="https://i.loli.net/2021/08/31/VtSLBQzahHfEwsO.png" alt="20210831161808"></p><p>修改方法如下：</p><ol><li><code>cd ~/.config/</code> 进入配置页面，如下图<br><img src="https://i.loli.net/2021/08/31/KxMe8OSh9lPNFvQ.png" alt="tupian"></li><li><code>code user-dirs.dirs</code> 编辑文件，比如我的修改内容是：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># This file is written by xdg-user-dirs-update</span><br><span class="line"># If you want to change or add directories, just edit the line you&#x27;re</span><br><span class="line"># interested in. All local changes will be retained on the next run.</span><br><span class="line"># Format is XDG_xxx_DIR=&quot;$HOME/yyy&quot;, where yyy is a shell-escaped</span><br><span class="line"># homedir-relative path, or XDG_xxx_DIR=&quot;/yyy&quot;, where /yyy is an</span><br><span class="line"># absolute path. No other format is supported.</span><br><span class="line"># </span><br><span class="line">XDG_DESKTOP_DIR=&quot;$HOME/desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR=&quot;$HOME/download&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR=&quot;$HOME/&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR=&quot;$HOME/Nutstore Files/Nut&quot;</span><br><span class="line">XDG_PICTURES_DIR=&quot;$HOME/picture&quot;</span><br><span class="line">XDG_TEMPLATES_DIR=&quot;$HOME/模板&quot;</span><br><span class="line">XDG_MUSIC_DIR=&quot;$HOME/work_space/3 shared_space&quot;</span><br><span class="line">XDG_VIDEOS_DIR=&quot;$HOME/work_space&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】必备软件的安装教程</title>
      <link href="/2021/08/20/server/02-ubuntu-basicapp/"/>
      <url>/2021/08/20/server/02-ubuntu-basicapp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>ubuntu 常用软件和进阶软件的安装教程，方便重装系统时快速进行配置。</p><h2 id="纯命令行安装"><a href="#纯命令行安装" class="headerlink" title="纯命令行安装"></a>纯命令行安装</h2><h3 id="系统自带（通常）"><a href="#系统自带（通常）" class="headerlink" title="系统自带（通常）"></a>系统自带（通常）</h3><ol><li><p>安装 git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li><p>安装 vim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-gdebi"><a href="#安装-gdebi" class="headerlink" title="安装 gdebi"></a>安装 gdebi</h3><p>gdebi 可以用于安装 .deb 文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdebi -y</span><br><span class="line">sudo apt-get install gdebi-core -y</span><br></pre></td></tr></table></figure></p><h3 id="安装-chrome"><a href="#安装-chrome" class="headerlink" title="安装 chrome"></a>安装 chrome</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb # 下载安装包</span><br><span class="line">sudo gdebi google-chrome-stable_current_amd64.deb # 安装文件</span><br><span class="line">rm google-chrome-stable_current_amd64.deb # 删除安装包</span><br></pre></td></tr></table></figure><h2 id="下载-安装"><a href="#下载-安装" class="headerlink" title="下载+安装"></a>下载+安装</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><ol><li><p>官网下载 .deb 文件<br><img src="https://i.loli.net/2021/08/21/H8f3rLNQnaBIAJz.png" alt="deb"></p><blockquote><p>注：直接用命令行 <code>sudo apt-get install code</code> 安装 <code>vscode</code>，会有中文输入问题，所以推荐下载 .deb 文件再安装</p></blockquote></li><li><p>进入目录，用 gdebi 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/download</span><br><span class="line">sudo gdebi google-chrome-stable_current_amd64.deb</span><br><span class="line">rm google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>安装中文扩展<br><img src="https://i.loli.net/2021/08/21/R8A2hZBK3E4eGIS.png" alt="chinese"></p></li></ol><h3 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h3><ol><li><p>进入<a href="https://pan.baidu.com/download/">官网</a>，下载 debi 格式安装包<br><img src="https://i.loli.net/2021/08/21/z3oR5rLZSJDhtIq.png" alt="package"></p></li><li><p>进入文件目录，用 <code>gdebi</code> 命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/download</span><br><span class="line">sudo gdebi baidunetdisk_3.5.0_amd64.deb</span><br><span class="line">rm baidunetdisk_3.5.0_amd64.deb</span><br></pre></td></tr></table></figure></li></ol><h3 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h3><ol><li><p><a href="https://zoom.us/download?os=linux">官网</a>下载 debi 格式安装包<br><img src="https://i.loli.net/2021/08/22/I5bCjiyhPkARHJY.png" alt="package"></p></li><li><p>进入目录，用 <code>gdebi</code> 命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gdebi zoom_amd64.deb</span><br><span class="line">rm zoom_amd64.deb</span><br></pre></td></tr></table></figure></li></ol><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><h4 id="坚果云简介"><a href="#坚果云简介" class="headerlink" title="坚果云简介"></a>坚果云简介</h4><p><a href="https://www.zhihu.com/question/20767341">坚果云</a>是一款很实用的办公软件。我平常手机，平板和电脑间的文件交互都是用坚果云。<br>坚果云的优点是使用免费，即时更新而且速度快。虽然每月只有 1G 的上传流量和 3G 的下载流量，但基本办公完全够用。</p><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><p><strong>参考链接</strong></p><blockquote><p>CSDN：<a href="https://blog.csdn.net/jiang_huixin/article/details/106129799">Ubuntu 安装坚果云</a>。</p></blockquote><ol><li><p>官网下载 .deb 文件，并用命令行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gdebi nautilus_nutstore_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>修复依赖关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></li><li><p>查看启动命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep Exec /usr/share/applications/nutstore-menu.desktop </span><br></pre></td></tr></table></figure><p>若 grep 未安装，先执行 <code>sudo apt-get install grep</code></p></li></ol><h4 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h4><p>安装完成后，点击图标没有反应，在这篇博客<a href="https://blog.csdn.net/jiang_huixin/article/details/106129799">Ubuntu 安装坚果云</a>找到问题：二进制组件需要解压到 ~/.nutstore/dist, 但是在默认的安装过程中这一解压过程会失败。</p><p><strong>解决方法</strong></p><ol><li><p>依系统下载二进制组件： <a href="https://www.jianguoyun.com/static/exe/installer/nutstore_linux_dist_x64.tar.gz">64位系统</a> 或 <a href="https://www.jianguoyun.com/static/exe/installer/nutstore_linux_dist_x86.tar.gz">32位系统</a>。或者用命令行下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 64 位</span><br><span class="line">wget https://www.jianguoyun.com/static/exe/installer/nutstore_linux_dist_x64.tar.gz -O nut_64.tar.gz</span><br><span class="line"></span><br><span class="line"># 32 位</span><br><span class="line"># wget https://www.jianguoyun.com/static/exe/installer/nutstore_linux_dist_x86.tar.gz -O nut_32.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>在下载目录执行命令行并输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.nutstore/dist</span><br><span class="line">tar -xzf nut_64.tar.gz -C ~/.nutstore/dist</span><br></pre></td></tr></table></figure><p>这时就能正常启动了。</p></li></ol><hr><h2 id="数学软件"><a href="#数学软件" class="headerlink" title="数学软件"></a>数学软件</h2><h3 id="sagemath"><a href="#sagemath" class="headerlink" title="sagemath"></a>sagemath</h3><h4 id="sagemath-简介"><a href="#sagemath-简介" class="headerlink" title="sagemath 简介"></a>sagemath 简介</h4><p><a href="https://www.sagemath.org/">SageMath</a> 是一个基于 GPL 协议的开源数学软件。它使用 Python 作为通用接口，将现有的许多开源软件包整合在一起，构建一个统一的计算平台。参考[sage 中文文档](<a href="https://cdn.jsdelivr.net/gh/RexWzh/FileBed/pdf/program/。">https://cdn.jsdelivr.net/gh/RexWzh/FileBed/pdf/program/。</a></p><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev # 安装依赖</span><br><span class="line">sudo apt-get install jupyter-notebook # 安装 jupyter notebook</span><br><span class="line">sudo apt-get install sagemath-jupyter -y # 安装软件</span><br></pre></td></tr></table></figure><blockquote><p>注：在<a href="https://www.sagemath.org/download-linux.html">官网</a>下载安装包并安装，但安装过程报错，且不好解决，最后还是用 <code>apt-get</code> 省事，但安装需要点时间。</p></blockquote><h4 id="修改默认打开路径"><a href="#修改默认打开路径" class="headerlink" title="修改默认打开路径"></a>修改默认打开路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config # 生成配置文件</span><br><span class="line">code ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p><code>ctrl + f</code> 查找关键字 <code>c.NotebookApp.notebook_dir</code>，去掉注释的 <code>#</code> 号，并添加路径，如下图<br><img src="https://i.loli.net/2021/08/21/p3BajzigxJwQYEm.png" alt="20210821000851"></p><blockquote><p>注：路径使用绝对地址，或者相对用户目录 <code>~</code> 的地址。例如 <code>/work_space/sage</code> 或 <code>/home/username/work_space/sage</code>，但不能 <code>~/work_space/sage</code>。</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>命令行输入 <code>sage</code>，在终端运行</p></li><li><p>使用 jupyter-notebook，输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sage -n --notebook=jupyter</span><br></pre></td></tr></table></figure><blockquote><p>注：系统会自动弹出窗口，工作路径为上一步中设置的路径。</p></blockquote></li></ol><h3 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h3><h4 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h4><p>Mathematica(MMA) 是一款科学计算软件，很好地结合了数值和符号计算引擎、图形系统、编程语言、文本系统、和与其他应用程序的高级连接。很多功能在相应领域内处于世界领先地位，它也是使用最广泛的数学软件之一。</p><h4 id="安装教程-1"><a href="#安装教程-1" class="headerlink" title="安装教程"></a>安装教程</h4><p><strong>参考链接</strong></p><blockquote><p>github 博客：<a href="https://tiebamma.github.io/InstallTutorial/">Mathematica 激活指南</a></p></blockquote><ol><li>在<a href="https://wdm.undo.icu/wyd/Mathematica/12.1.0.0/">这里</a>下载 .sh 文件，12.1 版本。</li><li>进入文件所在目录，打开终端</li><li>输入 <code>chmod a+x &lt;文件名&gt;</code> 赋予执行权限</li><li><code>sudo ./&lt;文件名&gt;</code> 运行安装，按窗口提示进行</li><li>参看<a href="https://tiebamma.github.io/InstallTutorial/">github 博客</a>。<del>打开应用，选择手动破解，打开<a href="https://ibug.io/blog/2019/05/mathematica-keygen/">破解地址</a>生成激活码和密钥。</del></li></ol><h3 id="Maple"><a href="#Maple" class="headerlink" title="Maple"></a>Maple</h3><p>占个位</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Texlive"><a href="#Texlive" class="headerlink" title="Texlive"></a>Texlive</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><ol><li><p>登录镜像网站，选择资源，复制地址<br><img src="https://i.loli.net/2021/08/31/siw6Fg7duBGHYrt.png" alt="镜像"></p><blockquote><p>注：国内镜像网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">清华</a>，<a href="https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/">中科大</a>，<a href="https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/">华中科大</a>，<a href="https://mirrors.aliyun.com/CTAN/systems/texlive/Images/">阿里云</a></p></blockquote></li><li><p>进入目录，用 <code>wget -c &lt;复制的地址&gt;</code> 下载镜像，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/download</span><br><span class="line">wget -c https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive.iso</span><br></pre></td></tr></table></figure><blockquote><p>注：-c 参数允许中断续传，示例用中科大的镜像。</p></blockquote></li></ol><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ol><li><p>安装图形化用户界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install perl-tk</span><br></pre></td></tr></table></figure></li><li><p>加载 iso 镜像文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   sudo mount -o loop texlive.iso /mnt</span><br><span class="line">   ````</span><br><span class="line">&gt; 注：此时提示 `/mnt: WARNING: device write-protected, mounted read-only`，不必理会。</span><br><span class="line"></span><br><span class="line">3. 启动图形化安装配置，按界面提示操作</span><br></pre></td></tr></table></figure><p>cd /mnt/<br>sudo ./install-tl -gui </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   ![20210831163858](https://i.loli.net/2021/08/31/qXZtdzjhMeH3uo5.png)</span><br><span class="line"></span><br><span class="line">4. 完成后卸载镜像</span><br></pre></td></tr></table></figure><p>sudo umount /mnt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 中文支持</span><br></pre></td></tr></table></figure><p>sudo apt-get install texlive-lang-chinese<br>sudo apt-get install texlive-latex-base texlive-latex-extra texlive-latex-recommended texlive-fonts-recommended</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 设置中文</span><br><span class="line">1. 安装 Xelatex</span><br></pre></td></tr></table></figure><p>sudo apt-get install texlive-xetex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 安装 texstudio </span><br></pre></td></tr></table></figure><p>sudo apt-get install texstudio<br>```</p></li><li><p>打开 texstudio -&gt; 点击 options -&gt; Configure Texstudio<br><img src="https://i.loli.net/2021/08/31/7hUgtvO52BMyoJX.png" alt="pic"></p></li><li><p>点击 General -&gt; Language， 选择 <code>zh-CN</code>，点击确认，此时界面语言为中文</p></li><li><p>回到刚刚设置，点击“构建”，默认编译器不支持中文，将其改为 <code>Xelatex</code><br><img src="https://i.loli.net/2021/08/31/bvCsJyPeopKWHGl.png" alt="pic"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【新手教程】云服务器的基本使用</title>
      <link href="/2021/08/20/server/01-build-server/"/>
      <url>/2021/08/20/server/01-build-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>上学期用 Github page 搭建个人博客，对网络建站有了兴趣。暑假在<a href="https://wanwang.aliyun.com/">万网</a>上注册了域名，又购买了<a href="https://cloud.tencent.com/act/new?from=14615">腾讯云服务器</a>用于域名备案。但服务器除了建站还很多用途，最起码这是一台实打实的云主机啊，趁着空闲来捣鼓看看怎么用。<br>教程主要针对 ubuntu 系统，<a href="#web">网页访问</a>部分对 Windows 系统也适用。</p><blockquote><p><strong>参考链接</strong><br>CSDN：<a href="https://blog.csdn.net/u013250416/article/details/78075590">连接远程 Ubuntu 服务器并传输文件</a><br>腾讯云：<a href="https://cloud.tencent.com/document/product/213/35699">远程软件登录 Linux 实例</a><br>腾讯云：<a href="https://cloud.tencent.com/document/product/213/2132">通过 FTP 上传文件到云服务器</a></p></blockquote><h1 id="Putty-连接远程服务器"><a href="#Putty-连接远程服务器" class="headerlink" title="Putty 连接远程服务器"></a>Putty 连接远程服务器</h1><p>Putty 是一款远程登录工具，用它可以非常方便的登录 Linux 服务器进行各种操作（命令行的方式）。</p><ol><li><p>打开本地终端，依次输入命令安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update # 对系统进行更新</span><br><span class="line">sudo apt-get install openssh-server # 安装 OpenSSH Server</span><br><span class="line">sudo ps -e |grep ssh # 确认 SSH Server ，正常启动命令行末会显示 sshd</span><br></pre></td></tr></table></figure></li><li><p>安装 putty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install putty # 安装软件</span><br></pre></td></tr></table></figure></li><li><p>运行软件，填写参数，如下图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo putty # 启动软件</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/20/WgbIEBXry7YmdOL.png" alt="pic"></p></li></ol><p>参数说明：</p><ul><li>Host Name（or IP address）：云服务器的公网 IP。</li><li>Port：云服务器的端口，必须设置为22。</li><li>Connect type：选择 “SSH”。</li><li>Saved Sessions：填写会话名称，例如 test。</li></ul><p>填写说明：</p><ol><li>登录服务器（<a href="https://console.cloud.tencent.com/cvm/index">腾讯云</a>），复制公网 IP，粘贴到 “Host Name” </li><li>点击 “Saved Sessions” 并保存</li><li>后续使用直接双击 “Saved Sessions” 下保存的会话名称，或者单击会话名称再点 Open</li></ol><ol><li>在弹出的窗口中输入账号密码，登录成功后进行测试：<br><img src="https://i.loli.net/2021/08/20/PVxvZiFjUhE7DAf.png" alt="pic"><blockquote><p>注：初次登录的账号密码在服务器站内信中查看；此外服务器需处于开机状态，否则 Putty 的界面会一直没有响应；</p></blockquote></li></ol><h1 id="FileZilla-文件传输"><a href="#FileZilla-文件传输" class="headerlink" title="FileZilla 文件传输"></a>FileZilla 文件传输</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FileZilla 是一个免费开源的 FTP 软件。<br>FTP 中文意思是文件传输协议，是英文 FileProtocol 的缩写，主要是用于 Internet 上的控制文件的双向传输，使用客户或者是服务器模式，FTP 主要属于网络传输协议的应用层，是电脑文件传输中很重要的一部分。</p><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol><li>打开本地终端，输入命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-install filezilla # 本机上安装 FileZilla 客户端</span><br></pre></td></tr></table></figure></li><li>输入 <code>filezilla</code> 启动软件，界面如下<br><img src="https://i.loli.net/2021/08/20/BGyWFnvS2rMQVCq.png" alt="启动界面"></li></ol><p>参数说明：</p><ul><li>主机：云服务器的公网 IP。</li><li>用户名：搭建 FTP 服务 时设置的 FTP 用户的帐号。图中以 “ftpuser1” 为例。</li><li>密码：搭建 FTP 服务 时设置的 FTP 用户帐号对应的密码。</li><li>端口：FTP 监听端口，默认为21。</li></ul><p>使用说明：</p><ul><li>连接成功后即可查看云服务器远程站点文件</li><li>左侧为本地文件，右键选中可以上传</li><li>右侧为服务器文件，右键选中可以下载</li></ul><h1 id="网页访问腾讯云服务器"><a href="#网页访问腾讯云服务器" class="headerlink" title="网页访问腾讯云服务器"></a><span id="web">网页访问腾讯云服务器</span></h1><p><strong>参考链接</strong></p><blockquote><p>腾讯云：<a href="https://cloud.tencent.com/document/product/213/2936">快速配置 Linux 云服务器</a>。<br>腾讯云：<a href="https://cloud.tencent.com/document/product/213/46001">搭建 Ubuntu 可视化界面</a></p></blockquote><h2 id="普通访问"><a href="#普通访问" class="headerlink" title="普通访问"></a>普通访问</h2><ol><li>进入<a href="https://console.cloud.tencent.com/cvm">控制台</a>，点击登录<br><img src="https://i.loli.net/2021/08/20/UuaFy7ecG4PT6nD.jpg" alt="picture"></li><li>选择标准登录方式，然后微信扫码<br><img src="https://i.loli.net/2021/08/20/hQ7jNZHMF6quT9C.png" alt="pic"></li></ol><h2 id="安装远程桌面"><a href="#安装远程桌面" class="headerlink" title="安装远程桌面"></a>安装远程桌面</h2><p>上一步中，选择第二种访问（VNC 登录），弹出的网页中执行下边命令。</p><ol><li>执行以下命令，将当前用户切换至 root 用户。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure></li><li>依次执行以下命令，更新和安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update # 更新和获取最新的软件及版本信息</span><br><span class="line">apt-get install vnc4server -y # 安装 VNC</span><br></pre></td></tr></table></figure></li><li>启动 VNC 服务，并设置密码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure>返回类似如下结果，表示 VNC 启动成功<br><img src="https://i.loli.net/2021/08/20/qSzE9M65dsaPA3x.png" alt="pic"></li><li>执行以下命令，安装插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装登录管理器</span><br><span class="line">sudo apt-get install gdm3 -y </span><br><span class="line"></span><br><span class="line"># 安装 Ubuntu 的桌面(这一步比较久)</span><br><span class="line">sudo apt-get install ubuntu-desktop </span><br><span class="line"></span><br><span class="line"># 安装 Gnome 相关配套软件</span><br><span class="line">sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal</span><br></pre></td></tr></table></figure></li><li>打开并修改 VNC 配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.vnc/xstartup # 用 vi 打开</span><br></pre></td></tr></table></figure>内容修改如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Uncomment the following two lines for normal desktop:</span><br><span class="line">export XKL_XMODMAP_DISABLE=1</span><br><span class="line">unset SESSION_MANAGER</span><br><span class="line"># exec /etc/X11/xinit/xinitrc</span><br><span class="line">unset DBUS_SESSION_BUS_ADDRESS</span><br><span class="line">gnome-panel &amp;</span><br><span class="line">gnome-settings-daemon &amp;</span><br><span class="line">metacity &amp;</span><br><span class="line">nautilus &amp;</span><br><span class="line">gnome-terminal &amp;</span><br></pre></td></tr></table></figure></li><li>执行以下命令，重启桌面进程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver -kill :1 # 杀掉原桌面进程，输入命令（其中的:1是桌面号）</span><br><span class="line">vncserver :1 #生成新的会话</span><br></pre></td></tr></table></figure></li><li>关机，然后在控制台开机<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown now # 关机</span><br></pre></td></tr></table></figure></li><li>重新用 VNC 登录，设置账户名等，此时已经是 Ubuntu 桌面了<br><img src="https://i.loli.net/2021/08/20/xgw8GXr9e74tvfu.png" alt="pic"></li></ol><blockquote><p>注： 官方教程最后一步是安装 VNC viewer 客户端访问，但界面放大了不习惯，网页版排版还行。<br>注2： Ubuntu 18 上，注销账户通过搜索应用 log out，点击退出。</p></blockquote><h1 id="后续设置"><a href="#后续设置" class="headerlink" title="后续设置"></a>后续设置</h1><p>安装软件：<a href="/2021/08/20/server/02-ubuntu-basicapp/" title="【Ubuntu】必备软件的安装教程">【Ubuntu】必备软件的安装教程</a></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>使用 putty 命令行管理远程服务器<ul><li>优点：使用方便，只要双击保存好的条目就进入登录界面</li><li>缺点：只能管理远端，（好像）不能上传或下载，文件交互</li></ul></li><li>使用 Filezilla 管理文件<ul><li>优点：上传下载很方便，可视化文件管理</li><li>缺点：每次进入都要重新输入公网地址</li></ul></li><li>普通网页访问：只能命令行控制，不能文件交互，每次需要手机扫码</li><li>远程网页桌面<ul><li>优点：打开像新主机一样</li><li>缺点：文件不能直接交互，登录需要手机扫码</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lean 简介及安装</title>
      <link href="/2021/08/13/programming/lean-intro/"/>
      <url>/2021/08/13/programming/lean-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>参考链接</p><blockquote><p>LEAN 官方文档：<a href="https://leanprover.github.io/theorem_proving_in_lean/">LEAN</a><br>知乎：<a href="https://zhuanlan.zhihu.com/p/183902909">Lean 的前世今生</a><br>知乎：<a href="https://www.zhihu.com/question/347064547/answer/1250972885">如何评价 MSR 的 Lean Theorem Prover？</a><br>知乎：<a href="https://zhuanlan.zhihu.com/p/181671237">计算机辅助证明简介</a><br>量子位：<a href="https://mp.weixin.qq.com/s/wSvnyJ3JG0xkntZ8qbfklQ">菲尔兹奖得主舒尔茨没做到的事，现在被计算机证明了</a></p></blockquote><p>软件安装<a href="#install">点这里</a>跳转</p><h2 id="Lean-简介"><a href="#Lean-简介" class="headerlink" title="Lean 简介"></a>Lean 简介</h2><p>Lean 是一个交互式定理证明器（Interactive Theorem Prover, ITP），也是一门通用函数式编程语言（从 Lean 3 开始）。微软研究院在2013年推出这一计算机定理证明器，数学家可以把数学定理转换成代码，再输入到 Lean 中，让程序来验证定理是否正确。当然，用于定理证明的编程语言还有很多，比如 <a href="https://coq.inria.fr/">Coq</a>，<a href="https://isabelle.in.tum.de/">isabelle</a>，<a href="https://www.cl.cam.ac.uk/~jrh13/hol-light/">HOL Light</a> 等，但相比之下，Lean 有更多优点且更契合数学习惯，几种语言的对比参看<a href="https://www.zhihu.com/question/347064547/answer/1250972885">这里</a>。<br>维基百科上，Lean 的词条名是 <a href="https://en.wikipedia.org/wiki/Lean_(proof_assistant">Lean(proof assistant)</a>)，括号内容说明了 Lean 的主要作用是<strong>辅助推导</strong>，而非完全的自动证明。</p><p>B站上关于 Lean 辅助证明数学命题的演示： <a href="https://www.bilibili.com/video/BV1wU4y1475g">素数无穷多的证明</a>。演示展现 Lean 的两个特点，一是逻辑推导的严谨，二是证明过程中，Lean 会根据命题内容检索定理，起辅助作用。<br>计算机证明依照严格的类型论逻辑，结论远比手推可靠（由哥得尔不完备定理，数学没有绝对的正确）。未来如果能结合自动推导，或许会给数学带来新的革命。<br>附：<a href="https://www.bilibili.com/video/BV1YE411r7Qw">Kevin Buzzard 关于未来数学的演讲</a></p><hr><h2 id="安装及使用-ubuntu"><a href="#安装及使用-ubuntu" class="headerlink" title="安装及使用(ubuntu)"></a><span id="install">安装及使用(ubuntu)</span></h2><blockquote><p>官方教程：<a href="https://leanprover-community.github.io/get_started.html">LEAN</a></p></blockquote><p>由于个人平时用 Ubuntu 系统更多，所以 Windows 系统的安装方法就不写了，参看官方教程。</p><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><p>输入下方命令一键安装<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/install_debian.sh &amp;&amp; bash install_debian.sh ; rm -f install_debian.sh &amp;&amp; source ~/.profile</span><br></pre></td></tr></table></figure></p><h3 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h3><p>由于接触 Ubuntu 不久，没有系统学过 shell 语法，基本是用什么学什么，所以这里顺带记个 shell 命令的笔记。</p><h4 id="命令拆分"><a href="#命令拆分" class="headerlink" title="命令拆分"></a>命令拆分</h4><p>在用 linux 命令的时候，我们经常需要同时执行多条命令。上边的命令实际由命令组成：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># wget 下载 .sh 脚本</span><br><span class="line">wget -q https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/install_debian.sh</span><br><span class="line"></span><br><span class="line"># bash 运行脚本</span><br><span class="line">bash install_debian.sh</span><br><span class="line"></span><br><span class="line"># rm 删除脚本文件</span><br><span class="line">rm -f install_debian.sh</span><br><span class="line"></span><br><span class="line"># source 执行文件中的命令</span><br><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure></p><p>命令之间分割方式如下（<a href="https://blog.csdn.net/stpeace/article/details/51870812">参考CSDN</a>）：</p><div class="table-container"><table><thead><tr><th>命令</th><th>用法</th></tr></thead><tbody><tr><td>分号</td><td>顺序地独立执行各条命令， 彼此之间不关心是否失败， 所有命令都会执行。</td></tr><tr><td>&amp;&amp;</td><td>顺序执行各条命令， 只有当前一个执行成功时候， 才执行后面的。</td></tr><tr><td>\</td><td>\</td><td></td><td>顺序执行各条命令， 只有当前面一个执行失败的时候， 才执行后面的。</td></tr></tbody></table></div><h4 id="内容解析"><a href="#内容解析" class="headerlink" title="内容解析"></a>内容解析</h4><ol><li>wget 是 Linux 下载文件的常用命令，后接下载链接，参数可选。常用参数有<ul><li><code>-c</code> 断点续传</li><li><code>-q</code> 不显示指令执行过程</li><li><code>-O + 文件名</code> 下载并以指定的文件名保存</li></ul></li><li>bash 运行脚本，等同于先用 <code>chmod</code> 赋予文件执行权限，再直接用 <code>./文件名.sh</code> 执行脚本，参看 <a href="https://blog.csdn.net/violet_echo_0908/article/details/52056071">bash运行脚本的几种方式</a>，以及 <a href="https://www.cnblogs.com/xx123/articles/9767839.html">bash 介绍</a>。</li><li>rm 是删除文件的命令，<code>-f</code> 参数设置强制删除，不提示确认。</li><li>source 可以把一个文件的内容当成是 shell 来执行，在需要输入一长串命令时可以使用，参看 <a href="https://blog.csdn.net/violet_echo_0908/article/details/52056071">博客-CSDN</a>。</li></ol><h3 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h3><p>Ubuntu 下，软件安装同时也装了 VsCode 扩展。直接新建 <code>.lean</code> 文件，用 vscode 打开就能编译了。</p><blockquote><p>注：第二次打开 vscode 时，提示插件获取失败，使用下边命令安装。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh &amp;&amp; echo &amp;&amp; read -n 1 -s -r -p &quot;Press any key to start Lean&quot; &amp;&amp; exit</span><br></pre></td></tr></table></figure><p>演示视频-素数无穷多</p><iframe src="//player.bilibili.com/player.html?aid=671179269&bvid=BV1wU4y1475g&cid=286235591&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 640px; height: 430px; max-width: 100%"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>haskell 简介及安装</title>
      <link href="/2021/08/13/programming/haskell-intro/"/>
      <url>/2021/08/13/programming/haskell-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>安装教程<a href="#install">点这里跳转</a></p><p>去年学纽结理论，看到一段用 <a href="https://www.wolfram.com/mathematica/">Mathematica</a> 求不变量的代码后，开始入坑函数式编程。<br><a href="https://www.zhihu.com/question/28292740">函数式编程</a>，这种抽象的编程方法更符合基础数学学生的思考逻辑，也更适合用于做抽象的数学推导。顺着函数式编程，又了解到语言更抽象的 Haskell，据说现在的编程语言都多少受 Haskell 的一些思想影响。</p><p><strong>参考文章</strong></p><blockquote><p>CSDN：<a href="https://blog.csdn.net/sweeneywang/article/details/52743906">浅谈 Haskell</a><br>知乎：<a href="https://www.zhihu.com/question/30501303/answer/48320397">学过Haskell是一种怎样的体验</a><br>知乎：<a href="https://www.zhihu.com/question/265498807">有必要学 Haskell 吗</a><br>知乎：<a href="https://www.zhihu.com/question/20478995/answer/15247766">Haskell 劝退</a><br>简书：<a href="https://www.jianshu.com/p/b52cea578324">为什么要学习Haskell语言</a><br>博客：<a href="https://blog.lilydjwg.me/2012/1/3/why-is-haskell-used-so-little-in-the-industry.31620.html">为什么业界很少使用 Haskell</a></p></blockquote><h2 id="Haskell-简述"><a href="#Haskell-简述" class="headerlink" title="Haskell 简述"></a>Haskell 简述</h2><p>Haskell 的命名源自美国逻辑学家 Haskell Brooks Curry，其在数学逻辑方面的工作使得函数式编程语言有了广泛的基础。<br>Haskell 优点</p><ul><li>使用纯函数式语言更加符合数学和逻辑的表达形式</li><li>使用纯函数式编程有利于编程技术在思想层面的精益求精</li><li>打破习惯上使用ALGO系的编程语言（C/C++等）形成了一些固有的思维习惯</li><li>有助于学习数学本身，特别是抽象的纯数学</li></ul><p>另外，B站搜范畴论，还可以找到这个视频<a href="https://www.bilibili.com/video/BV1TD4y1Q7r1">面向程序员的范畴论</a>，教学用的软件就是 Haskell 。。。</p><blockquote><p>注：Haskell 的学习曲线陡峭，也不知道最后能不能坚持下来。</p></blockquote><hr><h2 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a><span id="install">安装及使用</span></h2><blockquote><p>软件官网：<a href="https://www.haskell.org/">haskell</a><br>视频教程（Windows）：<a href="https://www.youtube.com/watch?v=4S0qxClMtr0">油管</a></p></blockquote><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ol><li><p>打开 shell，输入如下命令行，根据提示和自己需要操作：添加 bash 路径；安装 haskell-language-server (HLS)；安装 stack。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh</span><br></pre></td></tr></table></figure></li><li><p>显示内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Haskell!</span><br><span class="line"></span><br><span class="line">This script will download and install the following binaries:</span><br><span class="line">  * ghcup - The Haskell toolchain installer</span><br><span class="line">  * ghc   - The Glasgow Haskell Compiler</span><br><span class="line">  * cabal - The Cabal build tool for managing Haskell software</span><br><span class="line">  * stack - (optional) A cross-platform program for developing Haskell projects</span><br><span class="line">  * hls   - (optional) A language server for developers to integrate with their editor/IDE</span><br><span class="line"></span><br><span class="line">ghcup installs only into the following directory,</span><br><span class="line">which can be removed anytime:</span><br><span class="line">  /home/rex/.ghcup</span><br><span class="line"></span><br><span class="line">Press ENTER to proceed or ctrl-c to abort.</span><br><span class="line">Note that this script can be re-run at any given time.</span><br></pre></td></tr></table></figure><blockquote><p>注：下载和安装需要等待较长时间。<br>注2：bash 路径设置后，打开终端如果提示 <code>不是有效的标识符</code>，是文件 <code>~/.bashrc</code> 最后一行 <code>export</code> 的语法错了，删掉后半截完事。</p></blockquote></li><li><p>安装 GHC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ghc</span><br></pre></td></tr></table></figure></li></ol><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h4><ol><li><p>软件简介</p><blockquote><p>Chocolatey 是 Windows 下的包安装管理器，类似 Linuux 下的 <code>apt-get</code> 或 <code>yum</code>。<a href="https://chocolatey.org/install#individual">官方链接</a>。</p></blockquote></li><li><p>在 Windows 中搜索 PowerShell 并用管理员权限打开，输入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><blockquote><p>注： 终端会显示报错信息，忽略不管</p></blockquote></li></ol><h4 id="安装-Haskell-和-GHC"><a href="#安装-Haskell-和-GHC" class="headerlink" title="安装 Haskell 和 GHC"></a>安装 Haskell 和 GHC</h4><ol><li>管理员权限打开 PowerShell，输入代码，提示内容均输入 y<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install haskell-dev</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注：GHC 是 Haskell 的编译器。</p></blockquote><ol><li><p>安装完成，显示内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Chocolatey installed 5/5 packages.</span><br><span class="line"> See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line"> - ghc v9.0.1</span><br><span class="line"> - chocolatey-core.extension v1.3.5.1</span><br><span class="line"> - haskell-dev v0.0.1</span><br><span class="line"> - msys2 v20210604.0.0</span><br><span class="line"> - cabal v3.4.0.0</span><br></pre></td></tr></table></figure></li><li><p>测试安装</p><ol><li>新建文件 haskell.hs， 内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main :: IO()</span><br><span class="line">main = putStrLn &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure></li><li>打开命令行，进入文件所在目录，执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghc haskell.hs</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="VsCode-扩展"><a href="#VsCode-扩展" class="headerlink" title="VsCode 扩展"></a>VsCode 扩展</h3><p>打开 vscode，搜索安装扩展 <code>haskell</code> 和 <code>code runner</code>。</p><h3 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h3><ol><li>安装扩展后，右上角会出现运行按钮，在 vscode 上编辑 haskell 文件时，点击按钮就会编译运行。</li><li>一般地，ubuntu 使用 shell，Windows 使用 PowerShell ，输入命令 <code>ghc 文件名.hs</code> 编译文件。</li></ol><blockquote><p>注：Windows 端 <code>code runner</code> 扩展好像用不了，Ubuntu 一切正常。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haskell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】 搭建博客（教程汇总）</title>
      <link href="/2021/08/06/blog/hexo-hui-zong/"/>
      <url>/2021/08/06/blog/hexo-hui-zong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>一直想搭个博客平台，一边学习，一边输出，加深知识记忆也方便以后查阅。在B站搜索了许多教程，最后决定用 hexo 来搭建。本篇作为目录，汇总目前写的 hexo 博客教程。</p><h1 id="搭建及设置"><a href="#搭建及设置" class="headerlink" title="搭建及设置"></a>搭建及设置</h1><ol><li>博客框架搭建：<a href="/2021/07/19/blog/hexo-01-kuang-jia-pian/" title="【hexo】博客框架搭建">【hexo】博客框架搭建</a> <ul><li>安装 hexo nodejs 等软件</li><li>博客部署及踩坑点</li></ul></li><li>主题设置和美化：<a href="/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/" title="【hexo】 butterfly 主题设置">【hexo】 butterfly 主题设置</a> <ul><li>安装主题</li><li>修改主页</li><li>预览样式和内容样式</li><li>标签分类等常用功能</li></ul></li></ol><h1 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h1><ol><li>复杂样式设置：<a href="/2021/07/25/blog/hexo-03-fu-za-she-zhi/" title="【hexo】复杂样式的设置">【hexo】复杂样式的设置</a><ul><li>文章置顶，隐藏，页面跳转</li><li>评论，音乐，特效</li><li>后续规划</li></ul></li><li>Github 设置：<a href="/2021/07/19/programming/github-duo-zhang-hu-she-zhi/" title="Github 多账户设置及 git clone 加速">Github 多账户设置及 git clone 加速</a></li><li>多设备同步： <a href="/2021/08/29/blog/hexo-05-multidevice/" title="【hexo】多设备管理博客">【hexo】多设备管理博客</a><!-- 4. 网站加速：<a href="#">Post not found: hexo-04-accelerate</a> --></li></ol><h1 id="撰写相关"><a href="#撰写相关" class="headerlink" title="撰写相关"></a>撰写相关</h1><p>博客文章用 markdown 语法，必备技能：</p><ol><li>文章语法：<a href="/2021/07/19/blog/markdown-yu-fa/" title="Markdown 语法">Markdown 语法</a></li><li>图文加载：<a href="/2021/08/06/blog/tu-chuang/" title="PicGo 搭建图床">PicGo 搭建图床</a></li></ol><p>以上，关于博客搭建先到这，后续更新了再陆续添加。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo 搭建图床</title>
      <link href="/2021/08/06/blog/tu-chuang/"/>
      <url>/2021/08/06/blog/tu-chuang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>写博客总要和图片打交道，封面图片，文章插图等等，为了加快网页加载速度，图床就显得很有必要了。<a href="#install">点这里</a>跳转到安装教程</p><p><strong>参考链接</strong></p><blockquote><p>知乎：<a href="https://www.zhihu.com/question/41646507/answer/128090221">图床有什么用</a><br>知乎：<a href="https://zhuanlan.zhihu.com/p/131584831">搭建稳定快速高效图床</a><br>简书：<a href="https://www.jianshu.com/p/ea1eb11db63f">markdown 图床</a><br>简书：<a href="https://www.jianshu.com/p/155fa7e46763">GitHub &amp; SM.MS 图床的使用</a><br>CSDN：<a href="https://blog.csdn.net/jhsword/article/details/108946287">linux 安装 xclip</a><br>博客园：<a href="https://www.cnblogs.com/pineapple-py/p/14613332.html">Linux 为 Typora 搭建一个图床</a><br>百家号：<a href="https://baijiahao.baidu.com/s?id=1657980156535147441">vscode 配置插件 PicGo</a></p></blockquote><h2 id="图床是什么？"><a href="#图床是什么？" class="headerlink" title="图床是什么？"></a>图床是什么？</h2><h3 id="简书："><a href="#简书：" class="headerlink" title="简书："></a><a href="https://www.jianshu.com/p/ea1eb11db63f">简书：</a></h3><p>MarkDown 作为一种纯文本格式的标记语言，通过简单的标记语法，就使普通文本内容具有一定的格式。一次标记可以做到各平台通用，免除了富文本编辑器换平台就要重新排版的繁琐，越来越受欢迎，尤其是程序员群体。现在很多论坛和社区都开始支持使用 MarkDown（例如国外数学论坛 <a href="https://math.stackexchange.com/">stackexchage</a> )。但使用 Markdown 也有一个重要的问题，那就是图片的存储， Markdown 文件要用到图片时必须是一个链接。各个平台都有自己的图片存储方法，在不使用图床的情况下，同一篇文章发布到不同的平台需要单独上传图片一次。这个真的无法接受，太麻烦。</p><p>解决办法就是使用图床来单独存储图片，需要用到图片的地方统一用图床上的图片链接就好了。这样同一篇文章，发布到不同的平台真正可以简单复制粘贴。</p><p>图床就是一个图片服务器，用来存储图片，以URL的形式来供其他平台获取图片。可以自己搭建，也可以使用别人搭建好后提供的服务。自己搭建肯定花钱，别人搭建给你提供服务，有的收费，有的一定范围内不收费，有的完全免费。</p><blockquote><p>重要提示：数据是比金钱更重要的东西！这点务必先搞清楚。不要因为追求免费而用可能损失数据的服务，这样以后会发现，特别不值。即丢失了数据，又重新花钱，还浪费了时间。</p></blockquote><p>一般选择图床要满足下面条件</p><ul><li>可靠性。数据在当今社会是最宝贵的财富之一，因此在选择存储的服务时，可靠性无疑是首要的考虑因素。</li><li>安全性。面对攻击、盗取和破坏时如何保障数据不受到损失，是另一个重要的考虑因素。</li><li>是否简单易用。越简单易用越好。</li><li>价格是否合理。在满足前两条的情况下，越便宜越好，最好免费。</li></ul><h3 id="知乎："><a href="#知乎：" class="headerlink" title="知乎："></a><a href="https://www.zhihu.com/question/41646507/answer/128090221">知乎：</a></h3><p>首先呢，如果你的网站访问量很小，一天也就几百一千撑死的，而且网站也用不了几张图片，那可以直接存服务器，甚至是几百块钱的虚拟服务器就能搞定。但是如果网站是专门的图片站呢？而且都需要高清大图，而你的服务器比较寒酸。比如说存储空间只有一个G吧，这种情况你会咋整？肯定不会把图片放服务器吧？如果预算有限，你或许会选择把图片存到一些第三方云相册中，这就相当于一个变相的图床，当然你预算充足，你肯定也会想到，再买个服务器专门存放图片，那这个服务器就是图床。同理，你的网站访问量很高啊，一天几十万几百万啊，我的天啊，这时候你考虑的就不是服务器空间够不够大，而是惊人的并发数啊，光是请求 html 文件（或其他）的链接就处理不过来了，哪还有多余的资源去读取图片啊，索性就把图片存另一个服务器吧，给主服务器减轻压力啊，于是图床又诞生了。。。</p><h2 id="PicGo-搭建图床"><a href="#PicGo-搭建图床" class="headerlink" title="PicGo 搭建图床"></a>PicGo 搭建图床</h2><p><strong>参考链接</strong></p><blockquote><p>简书：<a href="https://www.jianshu.com/p/155fa7e46763">GitHub &amp; SM.MS 图床的使用</a><br>知乎：<a href="https://zhuanlan.zhihu.com/p/131584831">搭建稳定快速高效图床</a></p></blockquote><h3 id="PicGo-简介"><a href="#PicGo-简介" class="headerlink" title="PicGo 简介"></a>PicGo 简介</h3><p>PicGo 是一个用于快速上传图片并获取图片 URL 链接的工具，详见 <a href="https://picgo.github.io/PicGo-Doc/">PicGo 软件文档</a>。<br>PicGo 支持许多平台，包括：</p><ul><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5 版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS V2 v2.3.0-beta.0</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul><blockquote><p>官方注记：PicGo 本体不再增加默认的图床支持。你可以自行开发第三方图床插件。详见 <a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo-Core</a></p></blockquote><h3 id="PicGo-安装"><a href="#PicGo-安装" class="headerlink" title="PicGo 安装"></a><span id="install">PicGo 安装</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs npm # 若已安装，可忽略</span><br><span class="line">sudo npm install picgo -g # 全局安装 picgo</span><br></pre></td></tr></table></figure><p>注：安装 PicGo 后，要选择图床平台，下边介绍常用的两种：SM.MS 和 Github，二者区别如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">图床</th><th style="text-align:center">稳定性</th><th style="text-align:center">安全性</th><th style="text-align:center">访问速度</th><th style="text-align:center">上手难度</th></tr></thead><tbody><tr><td style="text-align:center">GitHub</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">一般</td><td style="text-align:center">简单</td></tr><tr><td style="text-align:center">SM.MS</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td><td style="text-align:center">较快</td><td style="text-align:center">简单</td></tr></tbody></table></div><blockquote><p>注：个人推荐用 Github，方便后期管理，也不用担心链接失效。</p></blockquote><h3 id="使用-SM-MS"><a href="#使用-SM-MS" class="headerlink" title="使用 SM.MS"></a><span id="SM">使用 SM.MS</span></h3><p>SM.MS 支持的图片格式包括 JPG、JPEG、GIF、PNG 及 BMP，单档不超过 5 MB，单次可上传图片最大 10 张，图片永久保存。配置过程如下：</p><ol><li>在 <a href="https://sm.ms">官网</a> 注册 sm.ms 账号</li><li>生成 <a href="https://sm.ms/home/apitoken">API token</a></li><li>配置 picgo：如下输入代码，选择 smms，粘贴上一步得到的 token<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader # 设置图床网站</span><br><span class="line">### 显示内容如下 ###</span><br><span class="line">? Choose a(n) uploader (Use arrow keys)</span><br><span class="line">❯ smms </span><br><span class="line">  tcyun </span><br><span class="line">  github </span><br><span class="line">  qiniu </span><br><span class="line">  imgur </span><br><span class="line">  aliyun </span><br><span class="line">  upyun</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-Github"><a href="#使用-Github" class="headerlink" title="使用 Github"></a>使用 Github</h3><ol><li>点击账号设置，获取 Github 的 token，参见 <a href="https://zhuanlan.zhihu.com/p/131584831">知乎</a>。</li><li>新建 Github 仓库（注意要用公开仓库），用于存储图片。</li><li>配置 picgo：方法一，操作同 <a href="#SM">SM.MS</a>；方法二，直接修改配置文件。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.picgo</span><br><span class="line">code config.json</span><br><span class="line">### 文件如下修改 ###</span><br><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;uploader&quot;: &quot;github&quot;,</span><br><span class="line">    &quot;current&quot;: &quot;github&quot;,</span><br><span class="line">    </span><br><span class="line">    // 设置 smms</span><br><span class="line">    &quot;smms&quot;: &#123;</span><br><span class="line">      &quot;token&quot;: &quot;******&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 设置 github</span><br><span class="line">    &quot;github&quot;: &#123;</span><br><span class="line">      &quot;repo&quot;: &quot;RexWzh/PicBed&quot;,</span><br><span class="line">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;******&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;images_for_blogs/&quot;,</span><br><span class="line">      &quot;customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/RexWzh/PicBed&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注1：方法一可能问题：设置 github 后，但配置文件仍然是 smms；建议直接方法二，<code>config.json</code> 文件两部分分别对应 smms 和 github 的设置，保留一个就够了。<br>注2：Github 设置中， <code>path</code> 路径结尾要带 <code>/</code>，<code>cuxtomUrl</code> 则不用。 </p></blockquote><p>方法二参数说明：</p><ul><li><code>uploader</code> 和 <code>current</code> 选 Github</li><li><code>repo</code> 格式为 <code>用户名/仓库名</code></li><li><code>token</code> 填第2步得到的 token</li><li><code>path</code> 为图片保存路径，选填，注意结尾带 <code>/</code></li><li><code>customUrl</code> 选填，这里用 jsdelivr 做 CDN 加速，链接格式为 <code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code>，参考 <a href="https://www.jsdelivr.com/">jsdelivr 官网</a>。关于 CND 是什么，感兴趣可以点<a href="https://www.zhihu.com/question/37353035">这里</a>。</li></ul><h3 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h3><p>上边选一种方法配置后，有两种方式上传图片生成链接。</p><ol><li><p>picgo u + 图片文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">picgo u picture.jpg</span><br><span class="line">### 显示内容 ###</span><br><span class="line">[PicGo INFO]: Before transform</span><br><span class="line">[PicGo INFO]: Transforming... Current transformer is [path]</span><br><span class="line">[PicGo INFO]: Before upload</span><br><span class="line">[PicGo INFO]: Uploading... Current uploader is [smms]</span><br><span class="line">[PicGo SUCCESS]: </span><br><span class="line">https://i.loli.net/2021/08/06/BbT7vxpNYqgLXwe.jpg</span><br></pre></td></tr></table></figure><blockquote><p>注：最后一行地址为生成的图片地址。</p></blockquote></li><li><p>上传剪贴板：复制图片后，输入 picgo upload，得到图片链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo upload</span><br></pre></td></tr></table></figure><blockquote><p>注：一次只能复制一张图片。</p></blockquote></li></ol><h2 id="Vscode-插件"><a href="#Vscode-插件" class="headerlink" title="Vscode 插件"></a>Vscode 插件</h2><p>VSCode 的 PicGo 是基于 PicGo-Core 开发的一款插件，用 <code>vscode + 插件</code> 写博客就能直接用快捷键插入图片了，更省心省事。</p><p><strong>参考链接</strong></p><blockquote><p>百家号：<a href="https://baijiahao.baidu.com/s?id=1657980156535147441">vscode 配置插件 PicGo</a><br>CSDN：<a href="https://blog.csdn.net/jhsword/article/details/108946287">linux 安装 xclip</a></p></blockquote><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><ol><li>搜索安装 vscode 插件 picgo，点击拓展设置<br><img src="https://i.loli.net/2021/08/06/UvL5tFQs8D2fnJj.jpg" alt="PicGo 插件"><blockquote><p>注：默认使用 SM.MS。</p></blockquote></li><li>配置 picgo：方法一，在扩展设置中填写参数；方法二，直接输入配置文件路径 <code>.picgo/config.json</code>。<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed/images_for_blogs/2021-08-07%2013-59-12%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="配置图片"></li><li>安装插件 xclip，实现终端与剪贴板之间的数据通道<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xclip</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>扩展提供了三种输入图片的方式</p><ol><li><code>ctrl + alt + u</code> 剪贴板图片快捷键（似乎不能用）</li><li><code>ctrl + alt + e</code> 打开文档浏览器导入文件</li><li><code>ctrl + alt + o</code> 使用命令行输入图片位置</li></ol><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p>除了 Github 和 SM.MS 还有很多图床网站，参考阅读：</p><blockquote><p>知乎：<a href="https://zhuanlan.zhihu.com/p/81713842">超好用：免费的图床</a><br>简书：<a href="https://www.jianshu.com/p/c35091dcba84">分享8个高速稳定的图床网站</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】复杂样式的设置</title>
      <link href="/2021/07/25/blog/hexo-03-fu-za-she-zhi/"/>
      <url>/2021/07/25/blog/hexo-03-fu-za-she-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="【hexo】复杂样式的设置"><a href="#【hexo】复杂样式的设置" class="headerlink" title="【hexo】复杂样式的设置"></a>【hexo】复杂样式的设置</h1><p>本篇介绍用 hexo 部署博客时的细碎设置，包括评论音乐等特殊功能的实现。</p><h1 id="hexo-基本使用"><a href="#hexo-基本使用" class="headerlink" title="hexo 基本使用"></a>hexo 基本使用</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>参考链接：<a href="https://segmentfault.com/a/1190000002632530">hexo常用命令笔记</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init # 初始化</span><br><span class="line">hexo s # 启动服务预览，等同于 hexo server</span><br><span class="line">hexo g # 生成静态页面，等同于 hexo generate</span><br><span class="line">hexo d # 部署到云端，等同于 hexo deploy</span><br><span class="line">hexo clean # 清除缓存，网页正常情况下可以忽略此条命令</span><br><span class="line">hexo n &lt;博客名&gt; # 新建博客，等同于 hexo new</span><br><span class="line">hexo new page &lt;pageName&gt; # 新建页面</span><br></pre></td></tr></table></figure><h2 id="npm-安装插件"><a href="#npm-安装插件" class="headerlink" title="npm 安装插件"></a>npm 安装插件</h2><blockquote><p><strong>参考链接</strong><br>简书：<a href="https://www.jianshu.com/p/920c1a6e999c">npm install的几种方式区别</a><br>CSDN：<a href="https://blog.csdn.net/qq_34227291/article/details/82928660">npm全局模块路径查看与路径修改</a></p></blockquote><p>npm 是 Nodejs 下的包管理器，以插件 <code>hexo-cli</code> 为例，常用命令如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">### 查看及修改信息</span><br><span class="line">npm ls –g # 查看全局安装路径以及全局安装的模块</span><br><span class="line">npm uninstall -g # 卸载全局模块</span><br><span class="line">npm config set prefix &lt;路径名&gt; # 修改全局路径</span><br><span class="line"></span><br><span class="line">### 安装插件</span><br><span class="line">npm install hexo-cli # 安装插件到当前目录的 node_modules 下</span><br><span class="line">npm install hexo-cli -g # 全局安装，默认全局路径为 /usr/lib/node_modules (ubuntu)</span><br><span class="line">npm install hexo-cli --save # 安装插件到当前目录，并修改 package.json</span><br></pre></td></tr></table></figure></p><blockquote><p>注：多设备用 git 管理博客时，插件目录 node_modules 被 .gitignore 忽略，可以新建 .sh 文件，记录安装命令，新设备上运行一次就够了。</p></blockquote><h2 id="文章草稿"><a href="#文章草稿" class="headerlink" title="文章草稿"></a>文章草稿</h2><p>一些文章正在编写，但还不想推送到网站上，可以使用草稿功能。</p><blockquote><p>参考简书：<a href="https://www.jianshu.com/p/262372d14c90">hexo新建文件草稿</a></p></blockquote><ol><li><p>新建草稿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;draft-name&quot;</span><br></pre></td></tr></table></figure><p>此时博客目录 source/_drafts/ 下出现了文件夹和草稿文件 “darft-name”。</p></li><li><p>用下边代码启动本地博客，可以将草稿内容加到显示的网页中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --drafts</span><br></pre></td></tr></table></figure></li></ol><h1 id="文章相关"><a href="#文章相关" class="headerlink" title="文章相关"></a>文章相关</h1><h2 id="文章隐藏"><a href="#文章隐藏" class="headerlink" title="文章隐藏"></a>文章隐藏</h2><p>一些转载的文章没必要放主页列表，那些文章只是用来检索知识库，主页放过多的转载文章还会影响浏览体验。</p><blockquote><p>参考博客：<a href="https://blog.zhheo.com/p/451ff5e9.html">Butterfly下如何隐藏部分文章</a>。</p></blockquote><ol><li><p>修改 pug 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd themes/butterfly/layout/includes/mixins # 进入目录</span><br><span class="line">code post-ui.pug # 编辑文件</span><br><span class="line">### 修改 post-ui.pug 文件前几行 ###</span><br><span class="line">mixin postUI(posts)</span><br><span class="line">each article , index in page.posts.data</span><br><span class="line">   if article.hide !== true</span><br><span class="line">      .recent-post-item</span><br></pre></td></tr></table></figure><blockquote><p>注：修改主要是添加第三行的 <code>if article.hide !== true</code>，并把对应内容向右缩进。</p></blockquote></li><li><p>修改文章：打开需要隐藏的文章，在头部信息(front-matter) 中添加一行 <code>hide: true</code>。</p></li></ol><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>很多时候，我们写的部分博客和文章是不希望别人看到的（比如一些个人的总结之类），所以对这些文章进行加密，提供密码才能访问是个不错的方式。</p><blockquote><p><strong>参考链接</strong><br>Github：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a><br>简书：<a href="https://www.jianshu.com/p/e4203ee066e5">Hexo博客文章加密</a></p></blockquote><ol><li><p>下载安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li><p>单篇加密方法一，在需要加密的文章开头(front-matter)添加一行 <code>password: 密码内容</code>，效果如下<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed/images_for_blogs/2021-08-14-.png" alt="password"></p></li><li><p>单篇加密方法二，在 front-matter 中添加多行内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">password: 密码</span><br><span class="line">message: Hey, 这篇文章被加密了，请输入密码！</span><br><span class="line">wrong_pass_message: Oh, 密码错了，检查一下好吗～</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed/images_for_blogs/2021-08-14%2021-14-59%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="message"><br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed/images_for_blogs/2021-08-14%2021-14-41%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="error"></p></li><li><p>按标签加密，进入 _config.yml，添加代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">message: Hey, 这篇文章被加密了，请输入密码！</span><br><span class="line">tags:</span><br><span class="line">   - &#123;name: 标签1, password: passwordA&#125;</span><br><span class="line">   - &#123;name: 标签2, password: passwordB&#125;</span><br><span class="line">wrong_pass_message: Oh, 密码错了，检查一下好吗～</span><br></pre></td></tr></table></figure></li><li><p>标签加密下，单篇取消加密只在 fornt-matter 加入 <code>password: &quot;&quot;</code></p></li></ol><p>补充说明：</p><ul><li>部署前要用 <code>hexo clean</code> 和 <code>hexo g</code> 重新生成才会生效</li><li>如果文章添加了多个加密标签，则按 _config.yml 中排在最上的标签加密</li><li>如果文章 front-matter 有 <code>password</code> 参数，则改参数优先于标签</li><li>加密文章的内容不能被自带的<em>搜索</em>功能检索到</li></ul><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p><strong>参考博客</strong></p><blockquote><p>wangwlj：<a href="http://wangwlj.com/2018/01/09/blog_pin_post/">Hexo博客彻底解决置顶问题</a><br>简书：<a href="https://www.jianshu.com/p/42a4efcdf8d7">解决Hexo博客文章置顶问题</a></p></blockquote><p>这里最好学点 Javascript 的语法，否则只能套用给定的代码，使用不灵活。</p><h1 id="内容相关"><a href="#内容相关" class="headerlink" title="内容相关"></a>内容相关</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>写文章经常用到跳转功能，站外链接的跳转可以用 Markdown 语法，但站内文章或文章上下片段的跳转，则得用其他方法。</p><ol><li><p>站内文章跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link &lt;站内文章的文件名&gt; &lt;链接标题名&gt;%&#125;</span><br></pre></td></tr></table></figure></li><li><p>页内跳转，借助 html 语法，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;target&quot;&gt;需要跳转的位置&lt;/span&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[跳转按钮](#target)</span><br></pre></td></tr></table></figure></li><li><p>示例</p><ul><li><code>&#123;% post_link blog/hexo-01-框架篇 站内跳转 %&#125;</code>：<a href="/2021/07/19/blog/hexo-01-kuang-jia-pian/" title="站内跳转">站内跳转</a></li><li><code>[页内跳转](#music)</code>：<a href="#music">页内跳转</a></li></ul></li></ol><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><p>文章的版权申明，追加在末尾。</p><p>在 _config.butterfly.yml 中检索 <em>copyright</em>，将 enable 设置为 true，编码 <em>decode</em> 设置为 utf-8<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: false</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure></p><blockquote><p>注：不需要加 Copyright 的文章只需要在开头(front-matter)加一行参数 <code>copyright: false</code></p></blockquote><h2 id="底部评论"><a href="#底部评论" class="headerlink" title="底部评论"></a>底部评论</h2><p>文章底部增加评论功能，这部分内容很长，直接引用博客，或者后续开一篇转载。</p><blockquote><p>参照 CSDN： <a href="https://xuqwblog.blog.csdn.net/article/details/107248047">博客评论邮件提醒</a>。<br>注1: 需要禁用某篇文章的评论，只要在开头(front-matter)加一行 <code>comments: false</code><br>注2：结合 <code>hexo n page</code> 可以实现留言板功能</p></blockquote><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h2><p>页面效果包括<em>背景特效</em>，<em>动态彩带</em>，<em>浮条线段</em>。<br>在 _config.butterfly.yml 文件中检索<em>Background effects</em>，将相应 enable 参数改为 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Background effects (背景特效)</span><br><span class="line"># --------------------------------------</span><br></pre></td></tr></table></figure><ol><li><p>设置背景彩带，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># canvas_ribbon (靜止彩帶背景)</span><br><span class="line"># See: https://github.com/hustcc/ribbon.js</span><br><span class="line">canvas_ribbon:</span><br><span class="line">enable: false</span><br><span class="line">size: 150</span><br><span class="line">alpha: 0.6</span><br><span class="line">zIndex: -1</span><br><span class="line">click_to_change: false</span><br><span class="line">mobile: false</span><br></pre></td></tr></table></figure></li><li><p>空间动态彩带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Fluttering Ribbon (動態彩帶)</span><br><span class="line">canvas_fluttering_ribbon:</span><br><span class="line">enable: false</span><br><span class="line">mobile: true</span><br></pre></td></tr></table></figure></li><li><p>背景浮动线条，鼠标互动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># canvas_nest</span><br><span class="line"># https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">enable: false</span><br><span class="line">color: &#x27;0,0,255&#x27; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">count: 99 # the number of lines, default: 99.</span><br><span class="line">mobile: false</span><br></pre></td></tr></table></figure><blockquote><p>注：还有点击特效等等，修改的代码位置都在附近。</p></blockquote></li></ol><h2 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a><span id="music">添加音乐</span></h2><blockquote><p>参考博客<a href="https://blog.csdn.net/qq_46435629/article/details/106295515">Butterfly主题开启Aplayer和“音乐”页面</a></p></blockquote><ol><li><p>创建音乐界面及安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page music</span><br><span class="line">npm install aplayer</span><br><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure></li><li><p>进入主题目录，查看 /layout/includes/layout.pug 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/butterfly/layout/includes</span><br><span class="line">code layout.pug</span><br></pre></td></tr></table></figure></li><li><p>找到下边片段，并修改（添加后三行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head</span><br><span class="line">  include ./head.pug</span><br><span class="line">  link(rel=&quot;stylesheet&quot; href=&quot;APlayer.min.css&quot;)</span><br><span class="line">  div(id=&quot;aplayer&quot;)</span><br><span class="line">  script(src=&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot; async)</span><br></pre></td></tr></table></figure></li><li><p>新建 aplayer.pug ，粘贴下边代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">touch aplayer.pug</span><br><span class="line"></span><br><span class="line">--- aplayer.pug 内容 ---</span><br><span class="line">link(rel=&quot;stylesheet&quot; type=&#x27;text/css&#x27;, href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;)</span><br><span class="line">script(type=&#x27;text/javascript&#x27;, src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;)</span><br><span class="line">script(type=&#x27;text/javascript&#x27;, src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;)</span><br></pre></td></tr></table></figure></li><li><p>返回博客目录，在 _config.yml 最后添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># aplayer</span><br><span class="line">aplayer: </span><br><span class="line">  script_dir: js                      # Public 目录下脚本目录路径，默认: &#x27;assets/js&#x27;</span><br><span class="line">  style_dir: css                         # Public 目录下样式目录路径，默认: &#x27;assets/css&#x27;</span><br><span class="line">  #cdn: http://xxx/aplayer.min.js                # 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span><br><span class="line">  #style_cdn: http://xxx/aplayer.min.css         # 引用 APlayer.css 外部 CDN 地址 (默认不开启)</span><br><span class="line">  meting: true                                  # MetingJS 支持</span><br><span class="line">  #meting_api: http://xxx/api.php                # 自定义 Meting API 地址</span><br><span class="line">  #meting_cdn: http://xxx/Meing.min.js           # 引用 Meting.js 外部 CDN 地址 (默认不开启)</span><br><span class="line">  asset_inject: true                            # 自动插入 Aplayer.js 与 Meting.js 资源脚本, 默认开启</span><br><span class="line">  #externalLink: http://xxx/aplayer.min.js       # 老版本参数，功能与参数 cdn 相同meting: true</span><br></pre></td></tr></table></figure></li><li><p>修改 _config.yml 参数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></li><li><p>如下修改文件 \source\music\index.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的歌单</span><br><span class="line">date: 2019-05-17 16:14:00</span><br><span class="line">cover: https://cdn.jsdelivr.net/gh/radium-bit/res@latest/Music.jpg</span><br><span class="line">type: &quot;music&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;font color=#0c74d6 size=3 face=&quot;黑体&quot;&gt;**这是歌单介绍，如果不需要刻意留空**&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&#123;% meting &quot;431683638&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：其中 “431683638” 为歌单 ID，netease 为网易云音乐。详细参数用法请参考<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a>。</p></blockquote></li></ol><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>博客使用初期有许多样式功能暂时不去实现，往后用的频率高了，再一点点更新。有兴趣但还没开始做的，在这里先记录。<br>另外，模板文件修改涉及不少前段开发的知识，包括 javascript 等都没接触过，也和本专业联系不大，所以一直拖着，后续有更具体的需要再学。实际上，博客用的模板有很多就是用 javascript 语法写的，修改也可以通过编写js文件（比如<a href="https://www.dazhuanlan.com/zhumo/topics/1626002">修改目录</a>）</p><h2 id="悬浮音乐"><a href="#悬浮音乐" class="headerlink" title="悬浮音乐"></a>悬浮音乐</h2><p>上一步<a href="#music">添加音乐</a>后，听歌可以在菜单栏点击进入，但切回主页后，音乐就暂停了。知乎上找了下，是 aplayer 不支持后台播放的缘故。播放器的主页显示，后台播放功能可以用 pjax 实现。</p><blockquote><p>参考博客：<a href="https://plushine.cn/52527.html">不会pjax？这篇博客教你如何搞定背景音乐</a><br>顺带一提，这个参考博客风格挺不错的样子嘿嘿，功能也很丰富！</p></blockquote><!-- ### 说说https://blog.csdn.net/cungudafa/article/details/105938885https://blog.csdn.net/AGNING/article/details/105694257https://artitalk.js.org/ --><h2 id="风格不错的博客"><a href="#风格不错的博客" class="headerlink" title="风格不错的博客"></a>风格不错的博客</h2><p><a href="https://plushine.cn/">XJHui的博客</a>：整体风格不错，小功能也挺多（看风格作者也是用的 butterfly）。</p><p><a href="https://myhkw.cn/">音乐播放器</a>：水波还有左边菜单的钢琴特效有点意思。</p><p><a href="https://blog.csdn.net/qq_41356250/article/details/114436363">hexo+butterfly 主题美化</a>，以及 <a href="https://ethant.top/articles/hexo541u/">参考博客</a>。</p><p><a href="https://www.yshawlon.cn/hexo-bo-ke-dai-ma-kuai-yang-shi-mei-hua.html">https://www.yshawlon.cn/hexo-bo-ke-dai-ma-kuai-yang-shi-mei-hua.html</a></p><h2 id="其他想法"><a href="#其他想法" class="headerlink" title="其他想法"></a>其他想法</h2><p>功能：</p><ul><li>看板娘</li><li>留言板</li><li>域名绑定</li><li>目录设置</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】 butterfly 主题设置</title>
      <link href="/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/"/>
      <url>/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="【hexo】主题美化-butterfly"><a href="#【hexo】主题美化-butterfly" class="headerlink" title="【hexo】主题美化-butterfly"></a>【hexo】主题美化-butterfly</h1><p><a href="https://hexo.io/themes/">hexo 官网</a>有很多主题，其中个人比较喜欢的两个主题是 next 和 butterfly，本篇博客介绍 butterfly 主题的基本配置和美化。</p><blockquote><p>教程参考博客：<a href="https://blog.csdn.net/a19097991483/article/details/107628123">hexo博客butterfly主题美化</a>。<br>主题 Github 链接： <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>。<br>限于篇幅，本篇只介绍基础样式，特殊样式在下篇介绍。</p></blockquote><p><strong>内容一览</strong>（思维导图）<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/%E7%BE%8E%E5%8C%96.png" title="主题美化" width="60%" height="60%"></p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><ol><li>搭建博客框架，参看<a href="/2021/07/19/blog/hexo-01-kuang-jia-pian/" title="【hexo】博客框架搭建">【hexo】博客框架搭建</a>。</li><li>进入博客目录，下载 butterfly 主题<br>方法一，用 git 将主题下载到 themes 目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>方法二，用 npm 将主题下载到 node_modules 目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li>进入上一步下载的主题目录，复制其中的配置文件 _config.yml 到博客主目录，并改名为 _config.butterfly.yml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 例如方法1</span><br><span class="line">cp themes/butterfly/_config.yml ./_config.butterfly.yml</span><br></pre></td></tr></table></figure></li><li>修改 _config.yml ，将其中 theme 参数改为 butterfly<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li><li>安装渲染工具<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li></ol><p>此时，用 hexo s 启动，就进入了 butterfly 主题。</p><blockquote><p>注1：两种下载方法，主题文件放在了不同目录上。<br>注2：命令 npm i 中，i 为 install 的缩写，但也有差异，参见<a href="https://blog.csdn.net/chern1992/article/details/79193211">npm i和npm install的区别</a>。npm i 默认为局部安装，安装目录为 node_modules。<br>注3：生成网页时，会先将博客目录的 _config.yml 文件与主题目录的 _config.yml 合并，当主目录中存在 _config.主题名.yml 文件时，系统会优先使用该文件。</p></blockquote><hr><h1 id="文章内部"><a href="#文章内部" class="headerlink" title="文章内部"></a>文章内部</h1><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>在文章开头的 title 下添加一行<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cover: &lt;图片链接&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：图片可放在 source 目录，然后用链接引用。</p></blockquote><h2 id="代码样式"><a href="#代码样式" class="headerlink" title="代码样式"></a>代码样式</h2><p>在 _config.butterfly.yml 中找到下边代码并修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight_theme: light #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # copy button</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span><br><span class="line">highlight_height_limit: false # unit: px</span><br><span class="line">code_word_wrap: false</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>highlight_theme # 设置代码样式，个人偏好为 mac</li><li>code_word_wrap # 设置是否换行</li><li>其他参数参看注释</li></ul><h2 id="赞赏界面"><a href="#赞赏界面" class="headerlink" title="赞赏界面"></a>赞赏界面</h2><p>在 _config.butterfly.yml 中找到下边代码并修改。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Sponsor/reward</span><br><span class="line">reward:</span><br><span class="line">  enable: false</span><br><span class="line">  QR_code:</span><br><span class="line">    # - img: /img/wechat.jpg</span><br><span class="line">    #   link:</span><br><span class="line">    #   text: wechat</span><br><span class="line">    # - img: /img/alipay.jpg</span><br><span class="line">    #   link:</span><br><span class="line">    #   text: alipay</span><br></pre></td></tr></table></figure></p><blockquote><p>注：文章相对路径的主目录有两个，一是博客主目录下的 source，二是主题主目录下的 source，生成网页时，这两个目录会合并。</p></blockquote><h2 id="底部分享按钮"><a href="#底部分享按钮" class="headerlink" title="底部分享按钮"></a>底部分享按钮</h2><p>在 _config.butterfly.yml 中找到下边代码并修改。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Share.js</span><br><span class="line"># https://github.com/overtrue/share.js</span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  sites: facebook,twitter,wechat,weibo,qq</span><br></pre></td></tr></table></figure></p><blockquote><p>注：国内分享一般去掉前两个。</p></blockquote><h1 id="文章预览"><a href="#文章预览" class="headerlink" title="文章预览"></a>文章预览</h1><h2 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h2><p>在 _config.butterfly.yml 中找到下边代码并修改。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否顯示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: both</span><br><span class="line">  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span><br><span class="line">  default_cover:</span><br><span class="line">    # - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure><br>参数说明：</p><ul><li>前三个参数设置不同位置是否放图片预览</li><li>index_enable 设置主页面</li><li>aside_enable 设置侧边栏</li><li>archives_enable 设置归档页面</li><li>position 设置主页面预览图位置</li></ul><h2 id="预览文字"><a href="#预览文字" class="headerlink" title="预览文字"></a>预览文字</h2><p>在 _config.butterfly.yml 中找到下边代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Display the article introduction on homepage</span><br><span class="line"># 1: description</span><br><span class="line"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span><br><span class="line"># 3: auto_excerpt (default)</span><br><span class="line"># false: do not show the article introduction</span><br><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 500 # if you set method to 2 or 3, the length need to config</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>method 参数取 1 或 2 或 3，代表不同预览方式，建议修改为 2。</li><li>参数取 3 ：摘取正文前边的文字</li><li>参数取 1 ：取 markdown 头部 description 参数的内容。</li><li>参数取 2 ：当 markdown 头部没有 description 参数时摘取正文，否则按 description 参数的内容。</li></ul><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><p><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/personal.png" width="30%" height="30%" title="个人信息"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>在 _config.butterfly.yml 中找到下边代码，将 img 参数改为头像图片的地址.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Avatar</span><br><span class="line">avatar:</span><br><span class="line">  img: https://i.loli.net/2021/02/24/5O1day2nriDzjSu.png</span><br><span class="line">  effect: false</span><br></pre></td></tr></table></figure></p><h2 id="姓名"><a href="#姓名" class="headerlink" title="姓名"></a>姓名</h2><p>这部分在 _config.yml 中直接修改，注意不是修改 _config.butterfly.yml 。</p><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>在 _config.butterfly.yml 中找到 social settings 并修改。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># social settings </span><br><span class="line"># formal:</span><br><span class="line">#   icon: link || the description</span><br><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/RexWzh || Github</span><br></pre></td></tr></table></figure></p><p>设置说明：</p><ul><li>冒号 : 前为图标设置，参看网站 <a href="https://fontawesome.com/">FontAwesome</a>。</li><li>|| 后为图标的文字描述，即鼠标移动到图标时会显示的文字。</li><li>更多图标设置，参考博客：<a href="https://blog.csdn.net/u012208219/article/details/106883012?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase">Hexo博客之优雅使用阿里iconfont图标</a></li></ul><h2 id="follow-me"><a href="#follow-me" class="headerlink" title="follow me"></a>follow me</h2><p>关注这行在后边 <a href="#aside">侧边栏</a> 中设定</p><h1 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h1><h2 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h2><blockquote><p>参考博客</p><ul><li><a href="https://blog.csdn.net/lcyaiym/article/details/76762105">hexo的Next创建tags</a>。</li><li><a href="https://blog.csdn.net/KnownAll/article/details/81360235?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control">hexo 添加标签和分类</a></li></ul></blockquote><ol><li><p>新建标签文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></li><li><p>进入 source/tags，修改 index.md（添加了 type 一行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-07-18 16:48:20</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>在文件 _config.butterfly.yml 中，找到 menu 选项添加一行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"> Tags: /tags/ || fas fa-tags</span><br></pre></td></tr></table></figure></li><li>文章标签设置<ol><li>单个标签<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: 标签</span><br></pre></td></tr></table></figure></li><li>多个标签<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">   - 标签1</span><br><span class="line">   - 标签2</span><br></pre></td></tr></table></figure><blockquote><p>注1： hexo n “博客名” 创建博客；hexo new page “名称” 则是创建“关于我”的页面。<br>注2：第三步中，|| 后设置图标<br>注3：文章设置标签时，用 tag 和 tags 效果等价。</p></blockquote></li></ol></li></ol><h2 id="分类设置"><a href="#分类设置" class="headerlink" title="分类设置"></a>分类设置</h2><p>与标签方法相同，其中 category 和 categories 效果等同。</p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><ol><li>安装插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li>在 _config.butterfly.yml 找到 local_search 并修改(将 enable 参数改为 true)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">labels:</span><br><span class="line">  input_placeholder: Search for Posts</span><br><span class="line">  hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure><blockquote><p>注：labels 一行可以不写。</p></blockquote></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="模板预定义"><a href="#模板预定义" class="headerlink" title="模板预定义"></a>模板预定义</h2><p>进入博客主目录，修改 scaffolds/ 目录下的 post.md 文件。每次使用 hexo n 新建文章时，都会按 post.md 的内容，生成空白模板。<br>参考内容（在初始模板中，添加了后四个参数）：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">   </span><br><span class="line">categories:</span><br><span class="line">   </span><br><span class="line">cover: </span><br><span class="line">description: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>默认设置如下，将 false 改 true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># A simple 404 page</span><br><span class="line">error_404:</span><br><span class="line">  enable: false</span><br><span class="line">  subtitle: &#x27;Page Not Found&#x27;</span><br><span class="line">  background: https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span><br></pre></td></tr></table></figure><h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a><span id="aside">侧边栏</span></h2><p>找到下边模块，并修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># aside (側邊欄)</span><br><span class="line"># --------------------------------------</span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Follow Me</span><br><span class="line">      link: https://github.com/xxxxxx</span><br></pre></td></tr></table></figure><blockquote><p>注：_config.butterfly.yml 中还有很多设置，例如访问验证 site_verification，数据分析 Analysis，广告 Advertisement；此外还有主题配色 theme_color，背景动态等等效果设置。本篇只介绍博客最基本的部分。</p></blockquote><h1 id="踩坑的地方"><a href="#踩坑的地方" class="headerlink" title="踩坑的地方"></a>踩坑的地方</h1><p><strong>主题配置文件 _config.butterfly.yml 中，参数填写错误导致样式失效。</strong>例如下边 author 参数只接收 true 和 false ，但填写人名就会导致代码高亮的样式失效。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># anchor</span><br><span class="line"># when you scroll in post, the URL will update according to header id.</span><br><span class="line">anchor: false</span><br></pre></td></tr></table></figure></p><blockquote><p>到这里，一个简约漂亮的博客就搭建好了。用 Github 部署的网站为静态网站，方便管理维护，但功能也有限。下边视频介绍了用 bmob 来实现动态网站功能，可以参考：<a href="https://www.bilibili.com/video/BV1yE411M7nG">github page + bmob 搭建动态网站</a>。</p></blockquote><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=94700507&bvid=BV1yE411M7nG&cid=161663339&page=1" frameborder="no" scrolling="no" allowfullscreen="allowfullscreen" ></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 多账户设置及 git clone 加速</title>
      <link href="/2021/07/19/programming/github-duo-zhang-hu-she-zhi/"/>
      <url>/2021/07/19/programming/github-duo-zhang-hu-she-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>最近发现用校园网克隆 Github 仓库太慢了，在知乎上搜索，发现用 Gitee 作为中介可以加快速度，所以写了这篇博客整理方法。本篇介绍一台电脑上使用多个 git 托管平台的方法，可用于解决 <strong>Github 仓库使用 git clone 太慢的问题</strong>（<a href="#clone">点这里跳转</a>）。</p><p>由于本地 Git 仓库和 GitHub 仓库之间的传输通过 SSH 加密，教程主要针对密钥的设置问题。</p><blockquote><p>参考链接：<br>廖学峰网站：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">Git教程</a>。<br>简书：<a href="https://www.jianshu.com/p/0ee8b976ceab">多个github帐号更新多个hexo博客</a><br>CSDN：<a href="https://blog.csdn.net/qq_43199318/article/details/103469792">在一台电脑上同时使用多个github账号</a><br>注：参考的教程大多提到用 <code>git config --global --unset user.name/email</code> 取消全局设置，但这步不做也没影响。主要因为设置的账号都是一个人在用，所以全局设置同一个用户在提交。</p></blockquote><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>假定本地 Git 需要连接三个账号： Github1, Github2, Gitee。</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>进入主目录，清理并生成 ssh 密钥<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh # 进入 .ssh 目录，如果不存在，先用 mkdir ~/.ssh 新建</span><br><span class="line">ssh-add -l # 查看 ssh 列表</span><br><span class="line">ssh-add -D # 清理本地 ssh 缓存</span><br><span class="line">### 生成三组密钥 ###</span><br><span class="line">ssh-keygen -t rsa -C &quot;youreamil@xx.com&quot; -f Github1_rsa </span><br><span class="line">ssh-keygen -t rsa -C &quot;youreamil@xx.com&quot; -f Github2_rsa </span><br><span class="line">ssh-keygen -t rsa -C &quot;youreamil@xx.com&quot; -f Gitee_rsa </span><br></pre></td></tr></table></figure></p><blockquote><p>注：-f 参数设置密钥名称，默认为 .ssh/id_rsa ，过程提示是否设置密码，按两次 Enter 跳过即可；键入代码后，.ssh/ 目录下生成了私钥 xxx_rsa 和公钥 xxx_rsa_pub。</p></blockquote><h3 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h3><p>由于现在取消了全局配置，所以需要将私钥加到 ssh 中，这样当用到的时候 ssh 才能够识别出来。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eval $(ssh-agent -s) # 打开ssh-agent</span><br><span class="line">ssh-add ~/.ssh/Github1_rsa</span><br><span class="line">ssh-add ~/.ssh/Github1_rsa</span><br><span class="line">ssh-add ~/.ssh/Github1_rsa</span><br><span class="line">ssh-add -l # 查看密钥列表</span><br></pre></td></tr></table></figure></p><h3 id="Github-设置密钥"><a href="#Github-设置密钥" class="headerlink" title="Github 设置密钥"></a>Github 设置密钥</h3><p>三个账号分别进行如下操作：</p><ol><li><p>登录 Github 账号，点击头像 -&gt; setting -&gt; SSH and GPG keys -&gt; New SSH key，如下图<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/githubsetting.jpg" alt="github ssh key"></p></li><li><p>title 任取，打开账号对应的公钥文件 .ssh/xxx_pub ，将内容复制到 key 中<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/sshkey.png" alt="ssh key"></p></li></ol><blockquote><p>注意：复制的是公钥文件 xxx_pub 。</p></blockquote><ol><li>Gitee 的操作类似，点击头像 -&gt; 设置 -&gt; SSH 公钥 -&gt; New SSH key</li></ol><h3 id="修改-Host"><a href="#修改-Host" class="headerlink" title="修改 Host"></a><span id="config">修改 Host</span></h3><p>在 .ssh/ 目录下，生成配置文件 config, 填写密钥信息。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">touch config # 新建文件</span><br><span class="line">code config # 内容修改如下</span><br><span class="line"></span><br><span class="line">---config 文件内容 ---</span><br><span class="line"># Github1</span><br><span class="line">Host Github1.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/Github1_rsa</span><br><span class="line"></span><br><span class="line"># Github2</span><br><span class="line">Host Github2.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/Github2_rsa</span><br><span class="line"></span><br><span class="line"># Gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/Gitee_rsa</span><br></pre></td></tr></table></figure></p><p>填写说明：</p><ul><li>三个部分对应三个账号</li><li>Host 后接调用地址</li><li>HostName 后接实际地址</li><li>User 后接标记用户名，可以随意设置</li><li>IdentityFile 后接验证密钥的路径</li></ul><blockquote><p>例如设置 Host <em>adress1</em>, HostName <em>adress2</em>, IdentityFile <em>file0</em>，使用 git clone git@<em>adress1</em>/xxx 时，实际进行的是 git clone git@<em>address2</em>/xxx， 在验证密钥使用文件 <em>file0</em>。<br>注： 以后使用 git clone 时，按对应账号的 Host 修改地址；如果只有一个账号，不需要用 config 文件来修改 host。</p></blockquote><h3 id="连接和测试"><a href="#连接和测试" class="headerlink" title="连接和测试"></a>连接和测试</h3><ol><li>Github/Gitee 密钥设置后，在本地输入下边代码连接测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@Github1.github.com</span><br><span class="line">ssh -T git@Github2.github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure></li><li>显示如下内容，输入 yes 确认<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (13.229.188.59)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;github.com,13.229.188.59&#x27; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure></li><li>若连接成功，会受到类似下边的信息，其中 <em>UserName</em> 为账号用户名。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi *UserName*! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><blockquote><p>注：连接成功后 .ssh 目录下会出现新文件 known_hosts；如果连接失败，会显示 <code>git@xxx: Permission denied (publickey).</code>。<br>注2：Linux 系统下使用 hexo 部署博客，连接仓库时 ssh 密钥检索的是 root 目录，因而还需要将 .ssh 复制过去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su # 进入管理员权限</span><br><span class="line">cp /home/UserName/.ssh /root/ # UserName 为计算机名（用户目录名）</span><br></pre></td></tr></table></figure></blockquote></li></ol><hr><h2 id="git-clone-加速"><a href="#git-clone-加速" class="headerlink" title="git clone 加速"></a><span id="clone">git clone 加速</span></h2><p>国内访问 Github 仓库有时候太慢，网上搜索了许多方案，发现最简单方式还是用国内的 Gitee 作为媒介，将仓库克隆到本地再重新链接。</p><blockquote><p>参考知乎：<a href="https://zhuanlan.zhihu.com/p/112480804">git clone github项目过慢的解决办法</a></p></blockquote><h3 id="授权码云"><a href="#授权码云" class="headerlink" title="授权码云"></a>授权码云</h3><ol><li>注册 Gitee （码云）的账号</li><li>点击新建仓库 -&gt; 从其他网站导入 -&gt; Github 授权</li><li>授权一次，以后就能在列表中看到自己中账号中的仓库。</li><li>选择需要相应仓库，导入 Gitee。</li></ol><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>使用 <code>git clone git@gitee.com:UserName/reponame.git</code> 克隆相应仓库。</p><h3 id="更改远程连接"><a href="#更改远程连接" class="headerlink" title="更改远程连接"></a>更改远程连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ./reponame # 进入 git 仓库</span><br><span class="line">git remote -v # 查看远程连接，显示如下，远程为 Gitee 仓库</span><br><span class="line"># origin git@gitee.com:UserName/reponame.git (fetch)</span><br><span class="line"># origin git@gitee.com:UserName/reponame.git (push)</span><br><span class="line"></span><br><span class="line">git remote remove origin # 取消与 Gitee 的连接</span><br><span class="line">git remote add origin git@github.com:UserName/roponame.git # 连接原先的 Github 仓库</span><br><span class="line">git pull master origin # 更新本地仓库</span><br><span class="line">git push -u origin master # 推送到远程仓库，-u 设置推送的默认分支</span><br></pre></td></tr></table></figure><blockquote><p>注：如果是多账号，这里 <code>git remote add origin</code> 后的链接要按 config 文件相应修改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/2021/07/19/blog/markdown-yu-fa/"/>
      <url>/2021/07/19/blog/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="markdown-学习笔记"><a href="#markdown-学习笔记" class="headerlink" title="markdown 学习笔记"></a>markdown 学习笔记</h2><p>Markdown 是一种纯文本格式的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式。优点主要有：纯文本编辑，操作简单，支持内嵌 html 等。</p><blockquote><p>参考简书：<a href="https://www.jianshu.com/p/191d1e21f7ed">Markdown基本语法</a>。</p></blockquote><hr><p><span id="jump">跳转到的地方。</span>未看完全文请忽略这个:)</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>单个 # 为一级标题，多个类似，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br></pre></td></tr></table></figure><p>效果：</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>加粗，斜体，粗斜体，下删除：</p><p>* <em>这是倾斜的文字</em> *</p><p>** <strong>这是加粗的文字</strong> **</p><p>*** <strong><em>这是斜体加粗的文字</em></strong> ***</p><p>~~ <del>这是加删除线的文字</del> ~~</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote><p>注：可添加多个 &gt; ，依次向右缩进。</p></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用三个或者三个以上的 - 或者 * 都可以，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br><span class="line">----</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><h2 id=""><a href="#" class="headerlink" title="*"></a><em>*</em></h2><hr><blockquote><p>注： 三种方法显示上没有区别</p></blockquote><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法：<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &quot;图片title&quot;)</span><br></pre></td></tr></table></figure></p><p>其中：</p><ul><li>图片alt 为图片读取错误时，显示的文字，可不加。</li><li>图片title 是图片的标题，即当鼠标移到图片上时显示的内容，可不加。</li></ul><p>示例：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](/picture/top_img.jpg &quot;小黑&quot;)</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/top_img.jpg" alt="图片" title="小黑"></p><!--    <img src="/picture/top_img.jpg" width="50%" height="50%"> --><blockquote><p>注1（来自简书）：markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。参考另一篇博客 <a href="/2021/08/06/blog/tu-chuang/" title="PicGo 搭建图床">PicGo 搭建图床</a> 。<br>注2：由于支持 html 语法，图片也可以用 html 的\<img\> 标签输入。<br>注3：设置图片大小的几种方法：<a href="https://www.zhihu.com/question/23378396">知乎</a>。</p></blockquote><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>语法如下，其中 title 可加可不加：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="gt-注：超链接可以实现文章内的跳转，例如-跳回开头，参考博客两种方式实现页内跳转。"><a href="#gt-注：超链接可以实现文章内的跳转，例如-跳回开头，参考博客两种方式实现页内跳转。" class="headerlink" title="&gt; 注：超链接可以实现文章内的跳转，例如 跳回开头，参考博客两种方式实现页内跳转。"></a>&gt; 注：超链接可以实现文章内的跳转，例如 <a href="#jump">跳回开头</a>，参考博客<a href="https://www.cnblogs.com/JohnTsai/p/4027229.html">两种方式实现页内跳转</a>。</h2><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表用 - + * 任何一种都可以，示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure></p><p>效果:</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><blockquote><p>注：- + * 跟内容之间都要有一个空格；</p></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表方法相同，用数字加点的方式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure></p><p>效果:</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>上一级和下一级之间敲三个空格即可，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 一级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line"></span><br><span class="line">1. hhh</span><br><span class="line">   1. hhh</span><br><span class="line">   2. hhh</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li></ul><ul><li>二级无序列表内容</li></ul><ul><li>二级无序列表内容</li></ul></li></ul><ol><li>hhh<ol><li>hhh</li><li>hhh</li></ol></li></ol><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>示例<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|--:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure></p><p>效果：</p><div class="table-container"><table><thead><tr><th style="text-align:left">表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table></div><blockquote><p>注： 这里 <code>---</code> 代表靠左， <code>:-:</code> 代表居中，<code>--:</code>代表靠右。</p></blockquote><p>附加一个用 Python 写的小工具，将表格数据自动转化为 Markdown 形式</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_to_MDTable</span>(<span class="params">l, title=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将列表转化为 Markdown 格式，title 默认取表格第一行&#x27;&#x27;&#x27;</span></span><br><span class="line">    align = <span class="string">&quot;|&quot;</span>.join([<span class="string">&quot;--&quot;</span>]*<span class="built_in">len</span>(l[<span class="number">0</span>])) <span class="comment"># markdown 表格第二行格式</span></span><br><span class="line">    l = [<span class="string">&quot;|&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line) <span class="keyword">for</span> line <span class="keyword">in</span> l] <span class="comment"># 列表元素转字符串，行内用 | 分割</span></span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 标题未定义，则提取列表第一行作为标题</span></span><br><span class="line">        title = l[<span class="number">0</span>]</span><br><span class="line">        l = l[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        title = <span class="string">&quot;|&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> title)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;\n&quot;</span>.join([title,align,*l]) <span class="comment"># 连接各行内容</span></span><br></pre></td></tr></table></figure></h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>用三个反斜点 ``` 包围，示例：</p><p>```<br>代码内容<br>```</p><p>效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】博客框架搭建</title>
      <link href="/2021/07/19/blog/hexo-01-kuang-jia-pian/"/>
      <url>/2021/07/19/blog/hexo-01-kuang-jia-pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>本篇介绍博客框架的搭建。</p><blockquote><p><strong>参考链接</strong><br>B站视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">手把手教你从0开始搭建自己的个人博客</a>。</p></blockquote><p>搭建准备：</p><ul><li>Win/linux/mac 系统</li><li>github 账号</li></ul><blockquote><p>注：不同系统的搭建方法基本一致，个人主要用 Ubuntu 系统，另外宿舍的 Win10 电脑上也搭建了博客。博客也可在多个设备上同步管理，参考这篇：<a href="/2021/08/29/blog/hexo-05-multidevice/" title="多终端同步管理博客">多终端同步管理博客</a></p></blockquote><hr><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><ol><li>在<a href="https://nodejs.org/en/download/">官网</a>下载安装 Nodejs，里边包含了包管理器 npm<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/nodejs.png" alt="Nodejs"></li><li>用 npm 安装 cnpm<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>再用 cnpm 全局安装 hexo-cli<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h1 id="github-准备"><a href="#github-准备" class="headerlink" title="github 准备"></a>github 准备</h1><ol><li>注册 Github 账号</li><li>新建公开仓库 username.github.io # 这里 username 必须是自己的 Github 用户名。</li><li>由于本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以需要一些设置，参考博客 <a href="/2021/07/19/programming/github-duo-zhang-hu-she-zhi/" title="Github 多账户设置及 git clone 加速">Github 多账户设置及 git clone 加速</a>。</li></ol><h1 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h1><blockquote><p>注：这部分内容，在出现问题时，直接整个文件夹删除就可以重来；Linux 下不建议用超级用户权限运行代码，否则后续写博客和修改配置都要获取权限。</p></blockquote><ol><li>新建文件夹 blog， 并进入目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init #初始化</span><br><span class="line">hexo s #启动博客（链接在浏览器中打开）</span><br></pre></td></tr></table></figure></li><li>新建博客<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &lt;blog title&gt; # 新建博客</span><br></pre></td></tr></table></figure><blockquote><p>注：新建的文章在目录 source/_posts/ 下，为 Markdown 文件。</p></blockquote></li></ol><h1 id="github-部署"><a href="#github-部署" class="headerlink" title="github 部署"></a>github 部署</h1><ol><li>安装 git 部署软件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li>进入 blog 目录，修改 _config.yml，在 # Deployment 一行，如下修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- deploy:</span><br><span class="line">   - type: &#x27;git&#x27;</span><br><span class="line">   - repo: &lt;git仓库&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里仓库填写 Github准备 中新建的仓库。</p></blockquote></li><li>部署命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清理 public 文件夹</span><br><span class="line">hexo g # 生成网站文件</span><br><span class="line">hexo d # 部署文件</span><br></pre></td></tr></table></figure></li></ol><h1 id="踩坑的地方"><a href="#踩坑的地方" class="headerlink" title="踩坑的地方"></a>踩坑的地方</h1><ol><li>部署显示 permission denied! <ul><li>这可能是 hexo 在链接 Github 时，验证 ssh 密钥查找的是根目录，解决方法是将用户目录 ~/ 下的 .ssh 文件夹复制到根目录。</li><li>参考教程：<a href="https://blog.csdn.net/zxwsbg/article/details/97611573">部署Hexo显示Permission Denied的解决方法</a>。</li></ul></li><li>写博客可以直接在目录 source/_post/ 下新建 markdown 文件，但注意文件开头格式。两处 —- 包围的部分为 <em>front-matter</em>，设置文章标题，标签，分类等参数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客标题</span><br><span class="line">xxx: xxx</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">博客正文</span><br></pre></td></tr></table></figure></li></ol><hr><p>搭建博客框架后，需要修改配置文件，把模板信息改为个人信息，同时可以修改主题样式，具体参看博客 <a href="/2021/07/22/blog/hexo-02-zhu-ti-mei-hua/" title="【hexo】 butterfly 主题设置">【hexo】 butterfly 主题设置</a>。</p><p>用 hexo 搭建博客的好处在，后续编写文章只需要新建和编辑 Markdown 文件，而 Markdown 的语法比 html 和 latex 都要简单得多，几分钟就能上手。这样可以将精力集中在内容写作上，而不是各种格式排版。Markdown 语法参看 <a href="/2021/07/19/blog/markdown-yu-fa/" title="Markdown 语法">Markdown 语法</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
